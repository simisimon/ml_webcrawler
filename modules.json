[
    {
        "description": "Base class for all estimators in scikit-learn.",
        "full_name": "sklearn.base.BaseEstimator",
        "href": "generated/sklearn.base.BaseEstimator.html#sklearn.base.BaseEstimator",
        "name": "BaseEstimator",
        "package_name": "module-sklearn.base",
        "params": [
            "deep"
        ],
        "type": "CLASS"
    },
    {
        "description": "Mixin class for all bicluster estimators in scikit-learn.",
        "full_name": "sklearn.base.BiclusterMixin",
        "href": "generated/sklearn.base.BiclusterMixin.html#sklearn.base.BiclusterMixin",
        "name": "BiclusterMixin",
        "package_name": "module-sklearn.base",
        "params": [],
        "type": "CLASS"
    },
    {
        "description": "Mixin class for all classifiers in scikit-learn.",
        "full_name": "sklearn.base.ClassifierMixin",
        "href": "generated/sklearn.base.ClassifierMixin.html#sklearn.base.ClassifierMixin",
        "name": "ClassifierMixin",
        "package_name": "module-sklearn.base",
        "params": [
            "X",
            "y",
            "sample_weight"
        ],
        "type": "CLASS"
    },
    {
        "description": "Mixin class for all cluster estimators in scikit-learn.",
        "full_name": "sklearn.base.ClusterMixin",
        "href": "generated/sklearn.base.ClusterMixin.html#sklearn.base.ClusterMixin",
        "name": "ClusterMixin",
        "package_name": "module-sklearn.base",
        "params": [
            "X",
            "y"
        ],
        "type": "CLASS"
    },
    {
        "description": "Mixin class for all density estimators in scikit-learn.",
        "full_name": "sklearn.base.DensityMixin",
        "href": "generated/sklearn.base.DensityMixin.html#sklearn.base.DensityMixin",
        "name": "DensityMixin",
        "package_name": "module-sklearn.base",
        "params": [
            "X",
            "y"
        ],
        "type": "CLASS"
    },
    {
        "description": "Mixin class for all regression estimators in scikit-learn.",
        "full_name": "sklearn.base.RegressorMixin",
        "href": "generated/sklearn.base.RegressorMixin.html#sklearn.base.RegressorMixin",
        "name": "RegressorMixin",
        "package_name": "module-sklearn.base",
        "params": [
            "X",
            "y",
            "sample_weight"
        ],
        "type": "CLASS"
    },
    {
        "description": "Mixin class for all transformers in scikit-learn.",
        "full_name": "sklearn.base.TransformerMixin",
        "href": "generated/sklearn.base.TransformerMixin.html#sklearn.base.TransformerMixin",
        "name": "TransformerMixin",
        "package_name": "module-sklearn.base",
        "params": [
            "X",
            "y",
            "**fit_params"
        ],
        "type": "CLASS"
    },
    {
        "description": "Transformer mixin that performs feature selection given a support mask",
        "full_name": "sklearn.feature_selection.SelectorMixin",
        "href": "generated/sklearn.feature_selection.SelectorMixin.html#sklearn.feature_selection.SelectorMixin",
        "name": "SelectorMixin",
        "package_name": "module-sklearn.base",
        "params": [
            "X",
            "y",
            "**fit_params"
        ],
        "type": "CLASS"
    },
    {
        "description": "Constructs a new unfitted estimator with the same parameters.",
        "full_name": "sklearn.base.clone",
        "href": "generated/sklearn.base.clone.html#sklearn.base.clone",
        "name": "clone",
        "package_name": "module-sklearn.base",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Return True if the given estimator is (probably) a classifier.",
        "full_name": "sklearn.base.is_classifier",
        "href": "generated/sklearn.base.is_classifier.html#sklearn.base.is_classifier",
        "name": "is_classifier",
        "package_name": "module-sklearn.base",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Return True if the given estimator is (probably) a regressor.",
        "full_name": "sklearn.base.is_regressor",
        "href": "generated/sklearn.base.is_regressor.html#sklearn.base.is_regressor",
        "name": "is_regressor",
        "package_name": "module-sklearn.base",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Context manager for global scikit-learn configuration",
        "full_name": "sklearn.config_context",
        "href": "generated/sklearn.config_context.html#sklearn.config_context",
        "name": "config_context",
        "package_name": "module-sklearn.base",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Retrieve current values for configuration set by set_config",
        "full_name": "sklearn.get_config",
        "href": "generated/sklearn.get_config.html#sklearn.get_config",
        "name": "get_config",
        "package_name": "module-sklearn.base",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Set global scikit-learn configuration",
        "full_name": "sklearn.set_config",
        "href": "generated/sklearn.set_config.html#sklearn.set_config",
        "name": "set_config",
        "package_name": "module-sklearn.base",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Print useful debugging information\u201d",
        "full_name": "sklearn.show_versions",
        "href": "generated/sklearn.show_versions.html#sklearn.show_versions",
        "name": "show_versions",
        "package_name": "module-sklearn.base",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Probability calibration with isotonic regression or logistic regression.",
        "full_name": "sklearn.calibration.CalibratedClassifierCV",
        "href": "generated/sklearn.calibration.CalibratedClassifierCV.html#sklearn.calibration.CalibratedClassifierCV",
        "name": "CalibratedClassifierCV",
        "package_name": "module-sklearn.calibration",
        "params": [
            "base_estimator",
            "method",
            "cv",
            "n_jobs",
            "ensemble"
        ],
        "type": "CLASS"
    },
    {
        "description": "Compute true and predicted probabilities for a calibration curve.",
        "full_name": "sklearn.calibration.calibration_curve",
        "href": "generated/sklearn.calibration.calibration_curve.html#sklearn.calibration.calibration_curve",
        "name": "calibration_curve",
        "package_name": "module-sklearn.calibration",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Perform Affinity Propagation Clustering of data.",
        "full_name": "sklearn.cluster.AffinityPropagation",
        "href": "generated/sklearn.cluster.AffinityPropagation.html#sklearn.cluster.AffinityPropagation",
        "name": "AffinityPropagation",
        "package_name": "module-sklearn.cluster",
        "params": [
            "damping",
            "max_iter",
            "convergence_iter",
            "copy",
            "preference",
            "affinity",
            "verbose",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Agglomerative Clustering.",
        "full_name": "sklearn.cluster.AgglomerativeClustering",
        "href": "generated/sklearn.cluster.AgglomerativeClustering.html#sklearn.cluster.AgglomerativeClustering",
        "name": "AgglomerativeClustering",
        "package_name": "module-sklearn.cluster",
        "params": [
            "n_clusters",
            "affinity",
            "memory",
            "connectivity",
            "compute_full_tree",
            "linkage",
            "distance_threshold",
            "compute_distances"
        ],
        "type": "CLASS"
    },
    {
        "description": "Implements the BIRCH clustering algorithm.",
        "full_name": "sklearn.cluster.Birch",
        "href": "generated/sklearn.cluster.Birch.html#sklearn.cluster.Birch",
        "name": "Birch",
        "package_name": "module-sklearn.cluster",
        "params": [
            "threshold",
            "branching_factor",
            "n_clusters",
            "compute_labels",
            "copy"
        ],
        "type": "CLASS"
    },
    {
        "description": "Perform DBSCAN clustering from vector array or distance matrix.",
        "full_name": "sklearn.cluster.DBSCAN",
        "href": "generated/sklearn.cluster.DBSCAN.html#sklearn.cluster.DBSCAN",
        "name": "DBSCAN",
        "package_name": "module-sklearn.cluster",
        "params": [
            "eps",
            "min_samples",
            "metric",
            "metric_params",
            "algorithm",
            "leaf_size",
            "p",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "Agglomerate features.",
        "full_name": "sklearn.cluster.FeatureAgglomeration",
        "href": "generated/sklearn.cluster.FeatureAgglomeration.html#sklearn.cluster.FeatureAgglomeration",
        "name": "FeatureAgglomeration",
        "package_name": "module-sklearn.cluster",
        "params": [
            "n_clusters",
            "affinity",
            "memory",
            "connectivity",
            "compute_full_tree",
            "linkage",
            "pooling_func",
            "distance_threshold",
            "compute_distances"
        ],
        "type": "CLASS"
    },
    {
        "description": "K-Means clustering.",
        "full_name": "sklearn.cluster.KMeans",
        "href": "generated/sklearn.cluster.KMeans.html#sklearn.cluster.KMeans",
        "name": "KMeans",
        "package_name": "module-sklearn.cluster",
        "params": [
            "n_clusters",
            "init",
            "n_init",
            "max_iter",
            "tol",
            "verbose",
            "random_state",
            "copy_x",
            "algorithm"
        ],
        "type": "CLASS"
    },
    {
        "description": "Mini-Batch K-Means clustering.",
        "full_name": "sklearn.cluster.MiniBatchKMeans",
        "href": "generated/sklearn.cluster.MiniBatchKMeans.html#sklearn.cluster.MiniBatchKMeans",
        "name": "MiniBatchKMeans",
        "package_name": "module-sklearn.cluster",
        "params": [
            "n_clusters",
            "init",
            "max_iter",
            "batch_size",
            "verbose",
            "compute_labels",
            "random_state",
            "tol",
            "max_no_improvement",
            "init_size",
            "n_init",
            "reassignment_ratio"
        ],
        "type": "CLASS"
    },
    {
        "description": "Mean shift clustering using a flat kernel.",
        "full_name": "sklearn.cluster.MeanShift",
        "href": "generated/sklearn.cluster.MeanShift.html#sklearn.cluster.MeanShift",
        "name": "MeanShift",
        "package_name": "module-sklearn.cluster",
        "params": [
            "bandwidth",
            "seeds",
            "bin_seeding",
            "min_bin_freq",
            "cluster_all",
            "n_jobs",
            "max_iter"
        ],
        "type": "CLASS"
    },
    {
        "description": "Estimate clustering structure from vector array.",
        "full_name": "sklearn.cluster.OPTICS",
        "href": "generated/sklearn.cluster.OPTICS.html#sklearn.cluster.OPTICS",
        "name": "OPTICS",
        "package_name": "module-sklearn.cluster",
        "params": [
            "min_samples",
            "max_eps",
            "metric",
            "p",
            "metric_params",
            "cluster_method",
            "eps",
            "xi",
            "predecessor_correction",
            "min_cluster_size",
            "algorithm",
            "leaf_size",
            "memory",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "Apply clustering to a projection of the normalized Laplacian.",
        "full_name": "sklearn.cluster.SpectralClustering",
        "href": "generated/sklearn.cluster.SpectralClustering.html#sklearn.cluster.SpectralClustering",
        "name": "SpectralClustering",
        "package_name": "module-sklearn.cluster",
        "params": [
            "n_clusters",
            "eigen_solver",
            "n_components",
            "random_state",
            "n_init",
            "gamma",
            "affinity",
            "n_neighbors",
            "eigen_tol",
            "assign_labels",
            "degree",
            "coef0",
            "kernel_params",
            "n_jobs",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "Spectral biclustering (Kluger, 2003).",
        "full_name": "sklearn.cluster.SpectralBiclustering",
        "href": "generated/sklearn.cluster.SpectralBiclustering.html#sklearn.cluster.SpectralBiclustering",
        "name": "SpectralBiclustering",
        "package_name": "module-sklearn.cluster",
        "params": [
            "n_clusters",
            "method",
            "n_components",
            "n_best",
            "svd_method",
            "n_svd_vecs",
            "mini_batch",
            "init",
            "n_init",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Spectral Co-Clustering algorithm (Dhillon, 2001).",
        "full_name": "sklearn.cluster.SpectralCoclustering",
        "href": "generated/sklearn.cluster.SpectralCoclustering.html#sklearn.cluster.SpectralCoclustering",
        "name": "SpectralCoclustering",
        "package_name": "module-sklearn.cluster",
        "params": [
            "n_clusters",
            "svd_method",
            "n_svd_vecs",
            "mini_batch",
            "init",
            "n_init",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Perform Affinity Propagation Clustering of data.",
        "full_name": "sklearn.cluster.affinity_propagation",
        "href": "generated/sklearn.cluster.affinity_propagation.html#sklearn.cluster.affinity_propagation",
        "name": "affinity_propagation",
        "package_name": "module-sklearn.cluster",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Performs DBSCAN extraction for an arbitrary epsilon.",
        "full_name": "sklearn.cluster.cluster_optics_dbscan",
        "href": "generated/sklearn.cluster.cluster_optics_dbscan.html#sklearn.cluster.cluster_optics_dbscan",
        "name": "cluster_optics_dbscan",
        "package_name": "module-sklearn.cluster",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Automatically extract clusters according to the Xi-steep method.",
        "full_name": "sklearn.cluster.cluster_optics_xi",
        "href": "generated/sklearn.cluster.cluster_optics_xi.html#sklearn.cluster.cluster_optics_xi",
        "name": "cluster_optics_xi",
        "package_name": "module-sklearn.cluster",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Computes the OPTICS reachability graph.",
        "full_name": "sklearn.cluster.compute_optics_graph",
        "href": "generated/sklearn.cluster.compute_optics_graph.html#sklearn.cluster.compute_optics_graph",
        "name": "compute_optics_graph",
        "package_name": "module-sklearn.cluster",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Perform DBSCAN clustering from vector array or distance matrix.",
        "full_name": "sklearn.cluster.dbscan",
        "href": "generated/dbscan-function.html#sklearn.cluster.dbscan",
        "name": "dbscan",
        "package_name": "module-sklearn.cluster",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Estimate the bandwidth to use with the mean-shift algorithm.",
        "full_name": "sklearn.cluster.estimate_bandwidth",
        "href": "generated/sklearn.cluster.estimate_bandwidth.html#sklearn.cluster.estimate_bandwidth",
        "name": "estimate_bandwidth",
        "package_name": "module-sklearn.cluster",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "K-means clustering algorithm.",
        "full_name": "sklearn.cluster.k_means",
        "href": "generated/sklearn.cluster.k_means.html#sklearn.cluster.k_means",
        "name": "k_means",
        "package_name": "module-sklearn.cluster",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Init n_clusters seeds according to k-means++",
        "full_name": "sklearn.cluster.kmeans_plusplus",
        "href": "generated/sklearn.cluster.kmeans_plusplus.html#sklearn.cluster.kmeans_plusplus",
        "name": "kmeans_plusplus",
        "package_name": "module-sklearn.cluster",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Perform mean shift clustering of data using a flat kernel.",
        "full_name": "sklearn.cluster.mean_shift",
        "href": "generated/sklearn.cluster.mean_shift.html#sklearn.cluster.mean_shift",
        "name": "mean_shift",
        "package_name": "module-sklearn.cluster",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Apply clustering to a projection of the normalized Laplacian.",
        "full_name": "sklearn.cluster.spectral_clustering",
        "href": "generated/sklearn.cluster.spectral_clustering.html#sklearn.cluster.spectral_clustering",
        "name": "spectral_clustering",
        "package_name": "module-sklearn.cluster",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Ward clustering based on a Feature matrix.",
        "full_name": "sklearn.cluster.ward_tree",
        "href": "generated/sklearn.cluster.ward_tree.html#sklearn.cluster.ward_tree",
        "name": "ward_tree",
        "package_name": "module-sklearn.cluster",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Applies transformers to columns of an array or pandas DataFrame.",
        "full_name": "sklearn.compose.ColumnTransformer",
        "href": "generated/sklearn.compose.ColumnTransformer.html#sklearn.compose.ColumnTransformer",
        "name": "ColumnTransformer",
        "package_name": "module-sklearn.compose",
        "params": [
            "transformers",
            "remainder",
            "sparse_threshold",
            "n_jobs",
            "transformer_weights",
            "verbose",
            "verbose_feature_names_out"
        ],
        "type": "CLASS"
    },
    {
        "description": "Meta-estimator to regress on a transformed target.",
        "full_name": "sklearn.compose.TransformedTargetRegressor",
        "href": "generated/sklearn.compose.TransformedTargetRegressor.html#sklearn.compose.TransformedTargetRegressor",
        "name": "TransformedTargetRegressor",
        "package_name": "module-sklearn.compose",
        "params": [
            "regressor",
            "transformer",
            "func",
            "inverse_func",
            "check_inverse"
        ],
        "type": "CLASS"
    },
    {
        "description": "Construct a ColumnTransformer from the given transformers.",
        "full_name": "sklearn.compose.make_column_transformer",
        "href": "generated/sklearn.compose.make_column_transformer.html#sklearn.compose.make_column_transformer",
        "name": "make_column_transformer",
        "package_name": "module-sklearn.compose",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Create a callable to select columns to be used with ColumnTransformer.",
        "full_name": "sklearn.compose.make_column_selector",
        "href": "generated/sklearn.compose.make_column_selector.html#sklearn.compose.make_column_selector",
        "name": "make_column_selector",
        "package_name": "module-sklearn.compose",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Maximum likelihood covariance estimator.",
        "full_name": "sklearn.covariance.EmpiricalCovariance",
        "href": "generated/sklearn.covariance.EmpiricalCovariance.html#sklearn.covariance.EmpiricalCovariance",
        "name": "EmpiricalCovariance",
        "package_name": "module-sklearn.covariance",
        "params": [
            "store_precision",
            "assume_centered"
        ],
        "type": "CLASS"
    },
    {
        "description": "An object for detecting outliers in a Gaussian distributed dataset.",
        "full_name": "sklearn.covariance.EllipticEnvelope",
        "href": "generated/sklearn.covariance.EllipticEnvelope.html#sklearn.covariance.EllipticEnvelope",
        "name": "EllipticEnvelope",
        "package_name": "module-sklearn.covariance",
        "params": [
            "store_precision",
            "assume_centered",
            "support_fraction",
            "contamination",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Sparse inverse covariance estimation with an l1-penalized estimator.",
        "full_name": "sklearn.covariance.GraphicalLasso",
        "href": "generated/sklearn.covariance.GraphicalLasso.html#sklearn.covariance.GraphicalLasso",
        "name": "GraphicalLasso",
        "package_name": "module-sklearn.covariance",
        "params": [
            "alpha",
            "mode",
            "tol",
            "enet_tol",
            "max_iter",
            "verbose",
            "assume_centered"
        ],
        "type": "CLASS"
    },
    {
        "description": "Sparse inverse covariance w/ cross-validated choice of the l1 penalty.",
        "full_name": "sklearn.covariance.GraphicalLassoCV",
        "href": "generated/sklearn.covariance.GraphicalLassoCV.html#sklearn.covariance.GraphicalLassoCV",
        "name": "GraphicalLassoCV",
        "package_name": "module-sklearn.covariance",
        "params": [
            "alphas",
            "n_refinements",
            "cv",
            "tol",
            "enet_tol",
            "max_iter",
            "mode",
            "n_jobs",
            "verbose",
            "assume_centered"
        ],
        "type": "CLASS"
    },
    {
        "description": "LedoitWolf Estimator.",
        "full_name": "sklearn.covariance.LedoitWolf",
        "href": "generated/sklearn.covariance.LedoitWolf.html#sklearn.covariance.LedoitWolf",
        "name": "LedoitWolf",
        "package_name": "module-sklearn.covariance",
        "params": [
            "store_precision",
            "assume_centered",
            "block_size"
        ],
        "type": "CLASS"
    },
    {
        "description": "Minimum Covariance Determinant (MCD): robust estimator of covariance.",
        "full_name": "sklearn.covariance.MinCovDet",
        "href": "generated/sklearn.covariance.MinCovDet.html#sklearn.covariance.MinCovDet",
        "name": "MinCovDet",
        "package_name": "module-sklearn.covariance",
        "params": [
            "store_precision",
            "assume_centered",
            "support_fraction",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Oracle Approximating Shrinkage Estimator.",
        "full_name": "sklearn.covariance.OAS",
        "href": "generated/sklearn.covariance.OAS.html#sklearn.covariance.OAS",
        "name": "OAS",
        "package_name": "module-sklearn.covariance",
        "params": [
            "store_precision",
            "assume_centered"
        ],
        "type": "CLASS"
    },
    {
        "description": "Covariance estimator with shrinkage.",
        "full_name": "sklearn.covariance.ShrunkCovariance",
        "href": "generated/sklearn.covariance.ShrunkCovariance.html#sklearn.covariance.ShrunkCovariance",
        "name": "ShrunkCovariance",
        "package_name": "module-sklearn.covariance",
        "params": [
            "store_precision",
            "assume_centered",
            "shrinkage"
        ],
        "type": "CLASS"
    },
    {
        "description": "Computes the Maximum likelihood covariance estimator",
        "full_name": "sklearn.covariance.empirical_covariance",
        "href": "generated/sklearn.covariance.empirical_covariance.html#sklearn.covariance.empirical_covariance",
        "name": "empirical_covariance",
        "package_name": "module-sklearn.covariance",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "l1-penalized covariance estimator",
        "full_name": "sklearn.covariance.graphical_lasso",
        "href": "generated/sklearn.covariance.graphical_lasso.html#sklearn.covariance.graphical_lasso",
        "name": "graphical_lasso",
        "package_name": "module-sklearn.covariance",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Estimates the shrunk Ledoit-Wolf covariance matrix.",
        "full_name": "sklearn.covariance.ledoit_wolf",
        "href": "generated/sklearn.covariance.ledoit_wolf.html#sklearn.covariance.ledoit_wolf",
        "name": "ledoit_wolf",
        "package_name": "module-sklearn.covariance",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Estimate covariance with the Oracle Approximating Shrinkage algorithm.",
        "full_name": "sklearn.covariance.oas",
        "href": "generated/oas-function.html#sklearn.covariance.oas",
        "name": "oas",
        "package_name": "module-sklearn.covariance",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Calculates a covariance matrix shrunk on the diagonal",
        "full_name": "sklearn.covariance.shrunk_covariance",
        "href": "generated/sklearn.covariance.shrunk_covariance.html#sklearn.covariance.shrunk_covariance",
        "name": "shrunk_covariance",
        "package_name": "module-sklearn.covariance",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Canonical Correlation Analysis, also known as \u201cMode B\u201d PLS.",
        "full_name": "sklearn.cross_decomposition.CCA",
        "href": "generated/sklearn.cross_decomposition.CCA.html#sklearn.cross_decomposition.CCA",
        "name": "CCA",
        "package_name": "module-sklearn.cross_decomposition",
        "params": [
            "n_components",
            "scale",
            "max_iter",
            "tol",
            "copy"
        ],
        "type": "CLASS"
    },
    {
        "description": "Partial Least Squares transformer and regressor.",
        "full_name": "sklearn.cross_decomposition.PLSCanonical",
        "href": "generated/sklearn.cross_decomposition.PLSCanonical.html#sklearn.cross_decomposition.PLSCanonical",
        "name": "PLSCanonical",
        "package_name": "module-sklearn.cross_decomposition",
        "params": [
            "n_components",
            "scale",
            "algorithm",
            "max_iter",
            "tol",
            "copy"
        ],
        "type": "CLASS"
    },
    {
        "description": "PLS regression.",
        "full_name": "sklearn.cross_decomposition.PLSRegression",
        "href": "generated/sklearn.cross_decomposition.PLSRegression.html#sklearn.cross_decomposition.PLSRegression",
        "name": "PLSRegression",
        "package_name": "module-sklearn.cross_decomposition",
        "params": [
            "n_components",
            "scale",
            "max_iter",
            "tol",
            "copy"
        ],
        "type": "CLASS"
    },
    {
        "description": "Partial Least Square SVD.",
        "full_name": "sklearn.cross_decomposition.PLSSVD",
        "href": "generated/sklearn.cross_decomposition.PLSSVD.html#sklearn.cross_decomposition.PLSSVD",
        "name": "PLSSVD",
        "package_name": "module-sklearn.cross_decomposition",
        "params": [
            "n_components",
            "scale",
            "copy"
        ],
        "type": "CLASS"
    },
    {
        "description": "Delete all the content of the data home cache.",
        "full_name": "sklearn.datasets.clear_data_home",
        "href": "generated/sklearn.datasets.clear_data_home.html#sklearn.datasets.clear_data_home",
        "name": "clear_data_home",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Dump the dataset in svmlight / libsvm file format.",
        "full_name": "sklearn.datasets.dump_svmlight_file",
        "href": "generated/sklearn.datasets.dump_svmlight_file.html#sklearn.datasets.dump_svmlight_file",
        "name": "dump_svmlight_file",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load the filenames and data from the 20 newsgroups dataset (classification).",
        "full_name": "sklearn.datasets.fetch_20newsgroups",
        "href": "generated/sklearn.datasets.fetch_20newsgroups.html#sklearn.datasets.fetch_20newsgroups",
        "name": "fetch_20newsgroups",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load and vectorize the 20 newsgroups dataset (classification).",
        "full_name": "sklearn.datasets.fetch_20newsgroups_vectorized",
        "href": "generated/sklearn.datasets.fetch_20newsgroups_vectorized.html#sklearn.datasets.fetch_20newsgroups_vectorized",
        "name": "fetch_20newsgroups_vectorized",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load the California housing dataset (regression).",
        "full_name": "sklearn.datasets.fetch_california_housing",
        "href": "generated/sklearn.datasets.fetch_california_housing.html#sklearn.datasets.fetch_california_housing",
        "name": "fetch_california_housing",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load the covertype dataset (classification).",
        "full_name": "sklearn.datasets.fetch_covtype",
        "href": "generated/sklearn.datasets.fetch_covtype.html#sklearn.datasets.fetch_covtype",
        "name": "fetch_covtype",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load the kddcup99 dataset (classification).",
        "full_name": "sklearn.datasets.fetch_kddcup99",
        "href": "generated/sklearn.datasets.fetch_kddcup99.html#sklearn.datasets.fetch_kddcup99",
        "name": "fetch_kddcup99",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load the Labeled Faces in the Wild (LFW) pairs dataset (classification).",
        "full_name": "sklearn.datasets.fetch_lfw_pairs",
        "href": "generated/sklearn.datasets.fetch_lfw_pairs.html#sklearn.datasets.fetch_lfw_pairs",
        "name": "fetch_lfw_pairs",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load the Labeled Faces in the Wild (LFW) people dataset (classification).",
        "full_name": "sklearn.datasets.fetch_lfw_people",
        "href": "generated/sklearn.datasets.fetch_lfw_people.html#sklearn.datasets.fetch_lfw_people",
        "name": "fetch_lfw_people",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load the Olivetti faces data-set from AT&T (classification).",
        "full_name": "sklearn.datasets.fetch_olivetti_faces",
        "href": "generated/sklearn.datasets.fetch_olivetti_faces.html#sklearn.datasets.fetch_olivetti_faces",
        "name": "fetch_olivetti_faces",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Fetch dataset from openml by name or dataset id.",
        "full_name": "sklearn.datasets.fetch_openml",
        "href": "generated/sklearn.datasets.fetch_openml.html#sklearn.datasets.fetch_openml",
        "name": "fetch_openml",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load the RCV1 multilabel dataset (classification).",
        "full_name": "sklearn.datasets.fetch_rcv1",
        "href": "generated/sklearn.datasets.fetch_rcv1.html#sklearn.datasets.fetch_rcv1",
        "name": "fetch_rcv1",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Loader for species distribution dataset from Phillips et.",
        "full_name": "sklearn.datasets.fetch_species_distributions",
        "href": "generated/sklearn.datasets.fetch_species_distributions.html#sklearn.datasets.fetch_species_distributions",
        "name": "fetch_species_distributions",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Return the path of the scikit-learn data dir.",
        "full_name": "sklearn.datasets.get_data_home",
        "href": "generated/sklearn.datasets.get_data_home.html#sklearn.datasets.get_data_home",
        "name": "get_data_home",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "DEPRECATED: load_boston is deprecated in 1.0 and will be removed in 1.2.",
        "full_name": "sklearn.datasets.load_boston",
        "href": "generated/sklearn.datasets.load_boston.html#sklearn.datasets.load_boston",
        "name": "load_boston",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load and return the breast cancer wisconsin dataset (classification).",
        "full_name": "sklearn.datasets.load_breast_cancer",
        "href": "generated/sklearn.datasets.load_breast_cancer.html#sklearn.datasets.load_breast_cancer",
        "name": "load_breast_cancer",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load and return the diabetes dataset (regression).",
        "full_name": "sklearn.datasets.load_diabetes",
        "href": "generated/sklearn.datasets.load_diabetes.html#sklearn.datasets.load_diabetes",
        "name": "load_diabetes",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load and return the digits dataset (classification).",
        "full_name": "sklearn.datasets.load_digits",
        "href": "generated/sklearn.datasets.load_digits.html#sklearn.datasets.load_digits",
        "name": "load_digits",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load text files with categories as subfolder names.",
        "full_name": "sklearn.datasets.load_files",
        "href": "generated/sklearn.datasets.load_files.html#sklearn.datasets.load_files",
        "name": "load_files",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load and return the iris dataset (classification).",
        "full_name": "sklearn.datasets.load_iris",
        "href": "generated/sklearn.datasets.load_iris.html#sklearn.datasets.load_iris",
        "name": "load_iris",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load and return the physical exercise Linnerud dataset.",
        "full_name": "sklearn.datasets.load_linnerud",
        "href": "generated/sklearn.datasets.load_linnerud.html#sklearn.datasets.load_linnerud",
        "name": "load_linnerud",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load the numpy array of a single sample image",
        "full_name": "sklearn.datasets.load_sample_image",
        "href": "generated/sklearn.datasets.load_sample_image.html#sklearn.datasets.load_sample_image",
        "name": "load_sample_image",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load sample images for image manipulation.",
        "full_name": "sklearn.datasets.load_sample_images",
        "href": "generated/sklearn.datasets.load_sample_images.html#sklearn.datasets.load_sample_images",
        "name": "load_sample_images",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load datasets in the svmlight / libsvm format into sparse CSR matrix",
        "full_name": "sklearn.datasets.load_svmlight_file",
        "href": "generated/sklearn.datasets.load_svmlight_file.html#sklearn.datasets.load_svmlight_file",
        "name": "load_svmlight_file",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load dataset from multiple files in SVMlight format",
        "full_name": "sklearn.datasets.load_svmlight_files",
        "href": "generated/sklearn.datasets.load_svmlight_files.html#sklearn.datasets.load_svmlight_files",
        "name": "load_svmlight_files",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Load and return the wine dataset (classification).",
        "full_name": "sklearn.datasets.load_wine",
        "href": "generated/sklearn.datasets.load_wine.html#sklearn.datasets.load_wine",
        "name": "load_wine",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate an array with constant block diagonal structure for biclustering.",
        "full_name": "sklearn.datasets.make_biclusters",
        "href": "generated/sklearn.datasets.make_biclusters.html#sklearn.datasets.make_biclusters",
        "name": "make_biclusters",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate isotropic Gaussian blobs for clustering.",
        "full_name": "sklearn.datasets.make_blobs",
        "href": "generated/sklearn.datasets.make_blobs.html#sklearn.datasets.make_blobs",
        "name": "make_blobs",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate an array with block checkerboard structure for biclustering.",
        "full_name": "sklearn.datasets.make_checkerboard",
        "href": "generated/sklearn.datasets.make_checkerboard.html#sklearn.datasets.make_checkerboard",
        "name": "make_checkerboard",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Make a large circle containing a smaller circle in 2d.",
        "full_name": "sklearn.datasets.make_circles",
        "href": "generated/sklearn.datasets.make_circles.html#sklearn.datasets.make_circles",
        "name": "make_circles",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate a random n-class classification problem.",
        "full_name": "sklearn.datasets.make_classification",
        "href": "generated/sklearn.datasets.make_classification.html#sklearn.datasets.make_classification",
        "name": "make_classification",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate the \u201cFriedman #1\u201d regression problem.",
        "full_name": "sklearn.datasets.make_friedman1",
        "href": "generated/sklearn.datasets.make_friedman1.html#sklearn.datasets.make_friedman1",
        "name": "make_friedman1",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate the \u201cFriedman #2\u201d regression problem.",
        "full_name": "sklearn.datasets.make_friedman2",
        "href": "generated/sklearn.datasets.make_friedman2.html#sklearn.datasets.make_friedman2",
        "name": "make_friedman2",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate the \u201cFriedman #3\u201d regression problem.",
        "full_name": "sklearn.datasets.make_friedman3",
        "href": "generated/sklearn.datasets.make_friedman3.html#sklearn.datasets.make_friedman3",
        "name": "make_friedman3",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate isotropic Gaussian and label samples by quantile.",
        "full_name": "sklearn.datasets.make_gaussian_quantiles",
        "href": "generated/sklearn.datasets.make_gaussian_quantiles.html#sklearn.datasets.make_gaussian_quantiles",
        "name": "make_gaussian_quantiles",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generates data for binary classification used in Hastie et al. 2009, Example 10.2.",
        "full_name": "sklearn.datasets.make_hastie_10_2",
        "href": "generated/sklearn.datasets.make_hastie_10_2.html#sklearn.datasets.make_hastie_10_2",
        "name": "make_hastie_10_2",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate a mostly low rank matrix with bell-shaped singular values.",
        "full_name": "sklearn.datasets.make_low_rank_matrix",
        "href": "generated/sklearn.datasets.make_low_rank_matrix.html#sklearn.datasets.make_low_rank_matrix",
        "name": "make_low_rank_matrix",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Make two interleaving half circles.",
        "full_name": "sklearn.datasets.make_moons",
        "href": "generated/sklearn.datasets.make_moons.html#sklearn.datasets.make_moons",
        "name": "make_moons",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate a random multilabel classification problem.",
        "full_name": "sklearn.datasets.make_multilabel_classification",
        "href": "generated/sklearn.datasets.make_multilabel_classification.html#sklearn.datasets.make_multilabel_classification",
        "name": "make_multilabel_classification",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate a random regression problem.",
        "full_name": "sklearn.datasets.make_regression",
        "href": "generated/sklearn.datasets.make_regression.html#sklearn.datasets.make_regression",
        "name": "make_regression",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate an S curve dataset.",
        "full_name": "sklearn.datasets.make_s_curve",
        "href": "generated/sklearn.datasets.make_s_curve.html#sklearn.datasets.make_s_curve",
        "name": "make_s_curve",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate a signal as a sparse combination of dictionary elements.",
        "full_name": "sklearn.datasets.make_sparse_coded_signal",
        "href": "generated/sklearn.datasets.make_sparse_coded_signal.html#sklearn.datasets.make_sparse_coded_signal",
        "name": "make_sparse_coded_signal",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate a sparse symmetric definite positive matrix.",
        "full_name": "sklearn.datasets.make_sparse_spd_matrix",
        "href": "generated/sklearn.datasets.make_sparse_spd_matrix.html#sklearn.datasets.make_sparse_spd_matrix",
        "name": "make_sparse_spd_matrix",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate a random regression problem with sparse uncorrelated design.",
        "full_name": "sklearn.datasets.make_sparse_uncorrelated",
        "href": "generated/sklearn.datasets.make_sparse_uncorrelated.html#sklearn.datasets.make_sparse_uncorrelated",
        "name": "make_sparse_uncorrelated",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate a random symmetric, positive-definite matrix.",
        "full_name": "sklearn.datasets.make_spd_matrix",
        "href": "generated/sklearn.datasets.make_spd_matrix.html#sklearn.datasets.make_spd_matrix",
        "name": "make_spd_matrix",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate a swiss roll dataset.",
        "full_name": "sklearn.datasets.make_swiss_roll",
        "href": "generated/sklearn.datasets.make_swiss_roll.html#sklearn.datasets.make_swiss_roll",
        "name": "make_swiss_roll",
        "package_name": "module-sklearn.datasets",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Dictionary learning.",
        "full_name": "sklearn.decomposition.DictionaryLearning",
        "href": "generated/sklearn.decomposition.DictionaryLearning.html#sklearn.decomposition.DictionaryLearning",
        "name": "DictionaryLearning",
        "package_name": "module-sklearn.decomposition",
        "params": [
            "n_components",
            "alpha",
            "max_iter",
            "tol",
            "fit_algorithm",
            "transform_algorithm",
            "transform_n_nonzero_coefs",
            "transform_alpha",
            "n_jobs",
            "code_init",
            "dict_init",
            "verbose",
            "split_sign",
            "random_state",
            "positive_code",
            "positive_dict",
            "transform_max_iter"
        ],
        "type": "CLASS"
    },
    {
        "description": "Factor Analysis (FA).",
        "full_name": "sklearn.decomposition.FactorAnalysis",
        "href": "generated/sklearn.decomposition.FactorAnalysis.html#sklearn.decomposition.FactorAnalysis",
        "name": "FactorAnalysis",
        "package_name": "module-sklearn.decomposition",
        "params": [
            "n_components",
            "tol",
            "copy",
            "max_iter",
            "noise_variance_init",
            "svd_method",
            "iterated_power",
            "rotation",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "FastICA: a fast algorithm for Independent Component Analysis.",
        "full_name": "sklearn.decomposition.FastICA",
        "href": "generated/sklearn.decomposition.FastICA.html#sklearn.decomposition.FastICA",
        "name": "FastICA",
        "package_name": "module-sklearn.decomposition",
        "params": [
            "n_components",
            "algorithm",
            "whiten",
            "fun",
            "fun_args",
            "max_iter",
            "tol",
            "w_init",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Incremental principal components analysis (IPCA).",
        "full_name": "sklearn.decomposition.IncrementalPCA",
        "href": "generated/sklearn.decomposition.IncrementalPCA.html#sklearn.decomposition.IncrementalPCA",
        "name": "IncrementalPCA",
        "package_name": "module-sklearn.decomposition",
        "params": [
            "n_components",
            "whiten",
            "copy",
            "batch_size"
        ],
        "type": "CLASS"
    },
    {
        "description": "Kernel Principal component analysis (KPCA).",
        "full_name": "sklearn.decomposition.KernelPCA",
        "href": "generated/sklearn.decomposition.KernelPCA.html#sklearn.decomposition.KernelPCA",
        "name": "KernelPCA",
        "package_name": "module-sklearn.decomposition",
        "params": [
            "n_components",
            "kernel",
            "gamma",
            "degree",
            "coef0",
            "kernel_params",
            "alpha",
            "fit_inverse_transform",
            "eigen_solver",
            "tol",
            "max_iter",
            "iterated_power",
            "remove_zero_eig",
            "random_state",
            "copy_X",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "Latent Dirichlet Allocation with online variational Bayes algorithm.",
        "full_name": "sklearn.decomposition.LatentDirichletAllocation",
        "href": "generated/sklearn.decomposition.LatentDirichletAllocation.html#sklearn.decomposition.LatentDirichletAllocation",
        "name": "LatentDirichletAllocation",
        "package_name": "module-sklearn.decomposition",
        "params": [
            "n_components",
            "doc_topic_prior",
            "topic_word_prior",
            "learning_method",
            "learning_decay",
            "learning_offset",
            "max_iter",
            "batch_size",
            "evaluate_every",
            "total_samples",
            "perp_tol",
            "mean_change_tol",
            "max_doc_update_iter",
            "n_jobs",
            "verbose",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Mini-batch dictionary learning.",
        "full_name": "sklearn.decomposition.MiniBatchDictionaryLearning",
        "href": "generated/sklearn.decomposition.MiniBatchDictionaryLearning.html#sklearn.decomposition.MiniBatchDictionaryLearning",
        "name": "MiniBatchDictionaryLearning",
        "package_name": "module-sklearn.decomposition",
        "params": [
            "n_components",
            "alpha",
            "n_iter",
            "fit_algorithm",
            "n_jobs",
            "batch_size",
            "shuffle",
            "dict_init",
            "transform_algorithm",
            "transform_n_nonzero_coefs",
            "transform_alpha",
            "verbose",
            "split_sign",
            "random_state",
            "positive_code",
            "positive_dict",
            "transform_max_iter"
        ],
        "type": "CLASS"
    },
    {
        "description": "Mini-batch Sparse Principal Components Analysis.",
        "full_name": "sklearn.decomposition.MiniBatchSparsePCA",
        "href": "generated/sklearn.decomposition.MiniBatchSparsePCA.html#sklearn.decomposition.MiniBatchSparsePCA",
        "name": "MiniBatchSparsePCA",
        "package_name": "module-sklearn.decomposition",
        "params": [
            "n_components",
            "alpha",
            "ridge_alpha",
            "n_iter",
            "callback",
            "batch_size",
            "verbose",
            "shuffle",
            "n_jobs",
            "method",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Non-Negative Matrix Factorization (NMF).",
        "full_name": "sklearn.decomposition.NMF",
        "href": "generated/sklearn.decomposition.NMF.html#sklearn.decomposition.NMF",
        "name": "NMF",
        "package_name": "module-sklearn.decomposition",
        "params": [
            "n_components",
            "init",
            "solver",
            "beta_loss",
            "tol",
            "max_iter",
            "random_state",
            "alpha",
            "alpha_W",
            "alpha_H",
            "l1_ratio",
            "verbose",
            "shuffle",
            "regularization"
        ],
        "type": "CLASS"
    },
    {
        "description": "Principal component analysis (PCA).",
        "full_name": "sklearn.decomposition.PCA",
        "href": "generated/sklearn.decomposition.PCA.html#sklearn.decomposition.PCA",
        "name": "PCA",
        "package_name": "module-sklearn.decomposition",
        "params": [
            "n_components",
            "copy",
            "whiten",
            "svd_solver",
            "tol",
            "iterated_power",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Sparse Principal Components Analysis (SparsePCA).",
        "full_name": "sklearn.decomposition.SparsePCA",
        "href": "generated/sklearn.decomposition.SparsePCA.html#sklearn.decomposition.SparsePCA",
        "name": "SparsePCA",
        "package_name": "module-sklearn.decomposition",
        "params": [
            "n_components",
            "alpha",
            "ridge_alpha",
            "max_iter",
            "tol",
            "method",
            "n_jobs",
            "U_init",
            "V_init",
            "verbose",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Sparse coding.",
        "full_name": "sklearn.decomposition.SparseCoder",
        "href": "generated/sklearn.decomposition.SparseCoder.html#sklearn.decomposition.SparseCoder",
        "name": "SparseCoder",
        "package_name": "module-sklearn.decomposition",
        "params": [
            "dictionary",
            "transform_algorithm",
            "transform_n_nonzero_coefs",
            "transform_alpha",
            "split_sign",
            "n_jobs",
            "positive_code",
            "transform_max_iter"
        ],
        "type": "CLASS"
    },
    {
        "description": "Dimensionality reduction using truncated SVD (aka LSA).",
        "full_name": "sklearn.decomposition.TruncatedSVD",
        "href": "generated/sklearn.decomposition.TruncatedSVD.html#sklearn.decomposition.TruncatedSVD",
        "name": "TruncatedSVD",
        "package_name": "module-sklearn.decomposition",
        "params": [
            "n_components",
            "algorithm",
            "n_iter",
            "random_state",
            "tol"
        ],
        "type": "CLASS"
    },
    {
        "description": "Solves a dictionary learning matrix factorization problem.",
        "full_name": "sklearn.decomposition.dict_learning",
        "href": "generated/sklearn.decomposition.dict_learning.html#sklearn.decomposition.dict_learning",
        "name": "dict_learning",
        "package_name": "module-sklearn.decomposition",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Solves a dictionary learning matrix factorization problem online.",
        "full_name": "sklearn.decomposition.dict_learning_online",
        "href": "generated/sklearn.decomposition.dict_learning_online.html#sklearn.decomposition.dict_learning_online",
        "name": "dict_learning_online",
        "package_name": "module-sklearn.decomposition",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Perform Fast Independent Component Analysis.",
        "full_name": "sklearn.decomposition.fastica",
        "href": "generated/fastica-function.html#sklearn.decomposition.fastica",
        "name": "fastica",
        "package_name": "module-sklearn.decomposition",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute Non-negative Matrix Factorization (NMF).",
        "full_name": "sklearn.decomposition.non_negative_factorization",
        "href": "generated/sklearn.decomposition.non_negative_factorization.html#sklearn.decomposition.non_negative_factorization",
        "name": "non_negative_factorization",
        "package_name": "module-sklearn.decomposition",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Sparse coding",
        "full_name": "sklearn.decomposition.sparse_encode",
        "href": "generated/sklearn.decomposition.sparse_encode.html#sklearn.decomposition.sparse_encode",
        "name": "sparse_encode",
        "package_name": "module-sklearn.decomposition",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Linear Discriminant Analysis.",
        "full_name": "sklearn.discriminant_analysis.LinearDiscriminantAnalysis",
        "href": "generated/sklearn.discriminant_analysis.LinearDiscriminantAnalysis.html#sklearn.discriminant_analysis.LinearDiscriminantAnalysis",
        "name": "LinearDiscriminantAnalysis",
        "package_name": "module-sklearn.discriminant_analysis",
        "params": [
            "solver",
            "shrinkage",
            "priors",
            "n_components",
            "store_covariance",
            "tol",
            "covariance_estimator"
        ],
        "type": "CLASS"
    },
    {
        "description": "Quadratic Discriminant Analysis.",
        "full_name": "sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis",
        "href": "generated/sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis.html#sklearn.discriminant_analysis.QuadraticDiscriminantAnalysis",
        "name": "QuadraticDiscriminantAnalysis",
        "package_name": "module-sklearn.discriminant_analysis",
        "params": [
            "priors",
            "reg_param",
            "store_covariance",
            "tol"
        ],
        "type": "CLASS"
    },
    {
        "description": "DummyClassifier is a classifier that makes predictions using simple rules.",
        "full_name": "sklearn.dummy.DummyClassifier",
        "href": "generated/sklearn.dummy.DummyClassifier.html#sklearn.dummy.DummyClassifier",
        "name": "DummyClassifier",
        "package_name": "module-sklearn.dummy",
        "params": [
            "strategy",
            "random_state",
            "constant"
        ],
        "type": "CLASS"
    },
    {
        "description": "Regressor that makes predictions using simple rules.",
        "full_name": "sklearn.dummy.DummyRegressor",
        "href": "generated/sklearn.dummy.DummyRegressor.html#sklearn.dummy.DummyRegressor",
        "name": "DummyRegressor",
        "package_name": "module-sklearn.dummy",
        "params": [
            "strategy",
            "constant",
            "quantile"
        ],
        "type": "CLASS"
    },
    {
        "description": "An AdaBoost classifier.",
        "full_name": "sklearn.ensemble.AdaBoostClassifier",
        "href": "generated/sklearn.ensemble.AdaBoostClassifier.html#sklearn.ensemble.AdaBoostClassifier",
        "name": "AdaBoostClassifier",
        "package_name": "module-sklearn.ensemble",
        "params": [
            "base_estimator",
            "n_estimators",
            "learning_rate",
            "algorithm",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "An AdaBoost regressor.",
        "full_name": "sklearn.ensemble.AdaBoostRegressor",
        "href": "generated/sklearn.ensemble.AdaBoostRegressor.html#sklearn.ensemble.AdaBoostRegressor",
        "name": "AdaBoostRegressor",
        "package_name": "module-sklearn.ensemble",
        "params": [
            "base_estimator",
            "n_estimators",
            "learning_rate",
            "loss",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "A Bagging classifier.",
        "full_name": "sklearn.ensemble.BaggingClassifier",
        "href": "generated/sklearn.ensemble.BaggingClassifier.html#sklearn.ensemble.BaggingClassifier",
        "name": "BaggingClassifier",
        "package_name": "module-sklearn.ensemble",
        "params": [
            "base_estimator",
            "n_estimators",
            "max_samples",
            "max_features",
            "bootstrap",
            "bootstrap_features",
            "oob_score",
            "warm_start",
            "n_jobs",
            "random_state",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "A Bagging regressor.",
        "full_name": "sklearn.ensemble.BaggingRegressor",
        "href": "generated/sklearn.ensemble.BaggingRegressor.html#sklearn.ensemble.BaggingRegressor",
        "name": "BaggingRegressor",
        "package_name": "module-sklearn.ensemble",
        "params": [
            "base_estimator",
            "n_estimators",
            "max_samples",
            "max_features",
            "bootstrap",
            "bootstrap_features",
            "oob_score",
            "warm_start",
            "n_jobs",
            "random_state",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "An extra-trees classifier.",
        "full_name": "sklearn.ensemble.ExtraTreesClassifier",
        "href": "generated/sklearn.ensemble.ExtraTreesClassifier.html#sklearn.ensemble.ExtraTreesClassifier",
        "name": "ExtraTreesClassifier",
        "package_name": "module-sklearn.ensemble",
        "params": [
            "n_estimators",
            "criterion",
            "max_depth",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_features",
            "max_leaf_nodes",
            "min_impurity_decrease",
            "bootstrap",
            "oob_score",
            "n_jobs",
            "random_state",
            "verbose",
            "warm_start",
            "class_weight",
            "ccp_alpha",
            "max_samples"
        ],
        "type": "CLASS"
    },
    {
        "description": "An extra-trees regressor.",
        "full_name": "sklearn.ensemble.ExtraTreesRegressor",
        "href": "generated/sklearn.ensemble.ExtraTreesRegressor.html#sklearn.ensemble.ExtraTreesRegressor",
        "name": "ExtraTreesRegressor",
        "package_name": "module-sklearn.ensemble",
        "params": [
            "n_estimators",
            "criterion",
            "max_depth",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_features",
            "max_leaf_nodes",
            "min_impurity_decrease",
            "bootstrap",
            "oob_score",
            "n_jobs",
            "random_state",
            "verbose",
            "warm_start",
            "ccp_alpha",
            "max_samples"
        ],
        "type": "CLASS"
    },
    {
        "description": "Gradient Boosting for classification.",
        "full_name": "sklearn.ensemble.GradientBoostingClassifier",
        "href": "generated/sklearn.ensemble.GradientBoostingClassifier.html#sklearn.ensemble.GradientBoostingClassifier",
        "name": "GradientBoostingClassifier",
        "package_name": "module-sklearn.ensemble",
        "params": [
            "loss",
            "learning_rate",
            "n_estimators",
            "subsample",
            "criterion",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_depth",
            "min_impurity_decrease",
            "init",
            "random_state",
            "max_features",
            "verbose",
            "max_leaf_nodes",
            "warm_start",
            "validation_fraction",
            "n_iter_no_change",
            "tol",
            "ccp_alpha"
        ],
        "type": "CLASS"
    },
    {
        "description": "Gradient Boosting for regression.",
        "full_name": "sklearn.ensemble.GradientBoostingRegressor",
        "href": "generated/sklearn.ensemble.GradientBoostingRegressor.html#sklearn.ensemble.GradientBoostingRegressor",
        "name": "GradientBoostingRegressor",
        "package_name": "module-sklearn.ensemble",
        "params": [
            "loss",
            "learning_rate",
            "n_estimators",
            "subsample",
            "criterion",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_depth",
            "min_impurity_decrease",
            "init",
            "random_state",
            "max_features",
            "alpha",
            "verbose",
            "max_leaf_nodes",
            "warm_start",
            "validation_fraction",
            "n_iter_no_change",
            "tol",
            "ccp_alpha"
        ],
        "type": "CLASS"
    },
    {
        "description": "Isolation Forest Algorithm.",
        "full_name": "sklearn.ensemble.IsolationForest",
        "href": "generated/sklearn.ensemble.IsolationForest.html#sklearn.ensemble.IsolationForest",
        "name": "IsolationForest",
        "package_name": "module-sklearn.ensemble",
        "params": [
            "n_estimators",
            "max_samples",
            "contamination",
            "max_features",
            "bootstrap",
            "n_jobs",
            "random_state",
            "verbose",
            "warm_start"
        ],
        "type": "CLASS"
    },
    {
        "description": "A random forest classifier.",
        "full_name": "sklearn.ensemble.RandomForestClassifier",
        "href": "generated/sklearn.ensemble.RandomForestClassifier.html#sklearn.ensemble.RandomForestClassifier",
        "name": "RandomForestClassifier",
        "package_name": "module-sklearn.ensemble",
        "params": [
            "n_estimators",
            "criterion",
            "max_depth",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_features",
            "max_leaf_nodes",
            "min_impurity_decrease",
            "bootstrap",
            "oob_score",
            "n_jobs",
            "random_state",
            "verbose",
            "warm_start",
            "class_weight",
            "ccp_alpha",
            "max_samples"
        ],
        "type": "CLASS"
    },
    {
        "description": "A random forest regressor.",
        "full_name": "sklearn.ensemble.RandomForestRegressor",
        "href": "generated/sklearn.ensemble.RandomForestRegressor.html#sklearn.ensemble.RandomForestRegressor",
        "name": "RandomForestRegressor",
        "package_name": "module-sklearn.ensemble",
        "params": [
            "n_estimators",
            "criterion",
            "max_depth",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_features",
            "max_leaf_nodes",
            "min_impurity_decrease",
            "bootstrap",
            "oob_score",
            "n_jobs",
            "random_state",
            "verbose",
            "warm_start",
            "ccp_alpha",
            "max_samples"
        ],
        "type": "CLASS"
    },
    {
        "description": "An ensemble of totally random trees.",
        "full_name": "sklearn.ensemble.RandomTreesEmbedding",
        "href": "generated/sklearn.ensemble.RandomTreesEmbedding.html#sklearn.ensemble.RandomTreesEmbedding",
        "name": "RandomTreesEmbedding",
        "package_name": "module-sklearn.ensemble",
        "params": [
            "n_estimators",
            "max_depth",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_leaf_nodes",
            "min_impurity_decrease",
            "sparse_output",
            "n_jobs",
            "random_state",
            "verbose",
            "warm_start"
        ],
        "type": "CLASS"
    },
    {
        "description": "Stack of estimators with a final classifier.",
        "full_name": "sklearn.ensemble.StackingClassifier",
        "href": "generated/sklearn.ensemble.StackingClassifier.html#sklearn.ensemble.StackingClassifier",
        "name": "StackingClassifier",
        "package_name": "module-sklearn.ensemble",
        "params": [
            "estimators",
            "final_estimator",
            "cv",
            "stack_method",
            "n_jobs",
            "passthrough",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "Stack of estimators with a final regressor.",
        "full_name": "sklearn.ensemble.StackingRegressor",
        "href": "generated/sklearn.ensemble.StackingRegressor.html#sklearn.ensemble.StackingRegressor",
        "name": "StackingRegressor",
        "package_name": "module-sklearn.ensemble",
        "params": [
            "estimators",
            "final_estimator",
            "cv",
            "n_jobs",
            "passthrough",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "Soft Voting/Majority Rule classifier for unfitted estimators.",
        "full_name": "sklearn.ensemble.VotingClassifier",
        "href": "generated/sklearn.ensemble.VotingClassifier.html#sklearn.ensemble.VotingClassifier",
        "name": "VotingClassifier",
        "package_name": "module-sklearn.ensemble",
        "params": [
            "estimators",
            "voting",
            "weights",
            "n_jobs",
            "flatten_transform",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "Prediction voting regressor for unfitted estimators.",
        "full_name": "sklearn.ensemble.VotingRegressor",
        "href": "generated/sklearn.ensemble.VotingRegressor.html#sklearn.ensemble.VotingRegressor",
        "name": "VotingRegressor",
        "package_name": "module-sklearn.ensemble",
        "params": [
            "estimators",
            "weights",
            "n_jobs",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "Histogram-based Gradient Boosting Regression Tree.",
        "full_name": "sklearn.ensemble.HistGradientBoostingRegressor",
        "href": "generated/sklearn.ensemble.HistGradientBoostingRegressor.html#sklearn.ensemble.HistGradientBoostingRegressor",
        "name": "HistGradientBoostingRegressor",
        "package_name": "module-sklearn.ensemble",
        "params": [
            "loss",
            "learning_rate",
            "max_iter",
            "max_leaf_nodes",
            "max_depth",
            "min_samples_leaf",
            "l2_regularization",
            "max_bins",
            "categorical_features",
            "monotonic_cst",
            "warm_start",
            "early_stopping",
            "scoring",
            "validation_fraction",
            "n_iter_no_change",
            "tol",
            "verbose",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Histogram-based Gradient Boosting Classification Tree.",
        "full_name": "sklearn.ensemble.HistGradientBoostingClassifier",
        "href": "generated/sklearn.ensemble.HistGradientBoostingClassifier.html#sklearn.ensemble.HistGradientBoostingClassifier",
        "name": "HistGradientBoostingClassifier",
        "package_name": "module-sklearn.ensemble",
        "params": [
            "loss",
            "learning_rate",
            "max_iter",
            "max_leaf_nodes",
            "max_depth",
            "min_samples_leaf",
            "l2_regularization",
            "max_bins",
            "categorical_features",
            "monotonic_cst",
            "warm_start",
            "early_stopping",
            "scoring",
            "validation_fraction",
            "n_iter_no_change",
            "tol",
            "verbose",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Custom warning to capture convergence problems",
        "full_name": "sklearn.exceptions.ConvergenceWarning",
        "href": "generated/sklearn.exceptions.ConvergenceWarning.html#sklearn.exceptions.ConvergenceWarning",
        "name": "ConvergenceWarning",
        "package_name": "module-sklearn.exceptions",
        "params": [],
        "type": "CLASS"
    },
    {
        "description": "Warning used to notify implicit data conversions happening in the code.",
        "full_name": "sklearn.exceptions.DataConversionWarning",
        "href": "generated/sklearn.exceptions.DataConversionWarning.html#sklearn.exceptions.DataConversionWarning",
        "name": "DataConversionWarning",
        "package_name": "module-sklearn.exceptions",
        "params": [],
        "type": "CLASS"
    },
    {
        "description": "Custom warning to notify potential issues with data dimensionality.",
        "full_name": "sklearn.exceptions.DataDimensionalityWarning",
        "href": "generated/sklearn.exceptions.DataDimensionalityWarning.html#sklearn.exceptions.DataDimensionalityWarning",
        "name": "DataDimensionalityWarning",
        "package_name": "module-sklearn.exceptions",
        "params": [],
        "type": "CLASS"
    },
    {
        "description": "Warning used to notify the user of inefficient computation.",
        "full_name": "sklearn.exceptions.EfficiencyWarning",
        "href": "generated/sklearn.exceptions.EfficiencyWarning.html#sklearn.exceptions.EfficiencyWarning",
        "name": "EfficiencyWarning",
        "package_name": "module-sklearn.exceptions",
        "params": [],
        "type": "CLASS"
    },
    {
        "description": "Warning class used if there is an error while fitting the estimator.",
        "full_name": "sklearn.exceptions.FitFailedWarning",
        "href": "generated/sklearn.exceptions.FitFailedWarning.html#sklearn.exceptions.FitFailedWarning",
        "name": "FitFailedWarning",
        "package_name": "module-sklearn.exceptions",
        "params": [],
        "type": "CLASS"
    },
    {
        "description": "Exception class to raise if estimator is used before fitting.",
        "full_name": "sklearn.exceptions.NotFittedError",
        "href": "generated/sklearn.exceptions.NotFittedError.html#sklearn.exceptions.NotFittedError",
        "name": "NotFittedError",
        "package_name": "module-sklearn.exceptions",
        "params": [],
        "type": "CLASS"
    },
    {
        "description": "Warning used when the metric is invalid",
        "full_name": "sklearn.exceptions.UndefinedMetricWarning",
        "href": "generated/sklearn.exceptions.UndefinedMetricWarning.html#sklearn.exceptions.UndefinedMetricWarning",
        "name": "UndefinedMetricWarning",
        "package_name": "module-sklearn.exceptions",
        "params": [],
        "type": "CLASS"
    },
    {
        "description": "This is now a no-op and can be safely removed from your code.",
        "full_name": "sklearn.experimental.enable_hist_gradient_boosting",
        "href": "generated/sklearn.experimental.enable_hist_gradient_boosting.html#module-sklearn.experimental.enable_hist_gradient_boosting",
        "name": "enable_hist_gradient_boosting",
        "package_name": "module-sklearn.experimental",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Enables IterativeImputer",
        "full_name": "sklearn.experimental.enable_iterative_imputer",
        "href": "generated/sklearn.experimental.enable_iterative_imputer.html#module-sklearn.experimental.enable_iterative_imputer",
        "name": "enable_iterative_imputer",
        "package_name": "module-sklearn.experimental",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Enables Successive Halving search-estimators",
        "full_name": "sklearn.experimental.enable_halving_search_cv",
        "href": "generated/sklearn.experimental.enable_halving_search_cv.html#module-sklearn.experimental.enable_halving_search_cv",
        "name": "enable_halving_search_cv",
        "package_name": "module-sklearn.experimental",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Transforms lists of feature-value mappings to vectors.",
        "full_name": "sklearn.feature_extraction.DictVectorizer",
        "href": "generated/sklearn.feature_extraction.DictVectorizer.html#sklearn.feature_extraction.DictVectorizer",
        "name": "DictVectorizer",
        "package_name": "module-sklearn.feature_extraction",
        "params": [
            "dtype",
            "separator",
            "sparse",
            "sort"
        ],
        "type": "CLASS"
    },
    {
        "description": "Implements feature hashing, aka the hashing trick.",
        "full_name": "sklearn.feature_extraction.FeatureHasher",
        "href": "generated/sklearn.feature_extraction.FeatureHasher.html#sklearn.feature_extraction.FeatureHasher",
        "name": "FeatureHasher",
        "package_name": "module-sklearn.feature_extraction",
        "params": [
            "n_features",
            "input_type",
            "dtype",
            "alternate_sign"
        ],
        "type": "CLASS"
    },
    {
        "description": "Reshape a 2D image into a collection of patches",
        "full_name": "sklearn.feature_extraction.image.extract_patches_2d",
        "href": "generated/sklearn.feature_extraction.image.extract_patches_2d.html#sklearn.feature_extraction.image.extract_patches_2d",
        "name": "extract_patches_2d",
        "package_name": "module-sklearn.feature_extraction",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Graph of the pixel-to-pixel connections",
        "full_name": "sklearn.feature_extraction.image.grid_to_graph",
        "href": "generated/sklearn.feature_extraction.image.grid_to_graph.html#sklearn.feature_extraction.image.grid_to_graph",
        "name": "grid_to_graph",
        "package_name": "module-sklearn.feature_extraction",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Graph of the pixel-to-pixel gradient connections",
        "full_name": "sklearn.feature_extraction.image.img_to_graph",
        "href": "generated/sklearn.feature_extraction.image.img_to_graph.html#sklearn.feature_extraction.image.img_to_graph",
        "name": "img_to_graph",
        "package_name": "module-sklearn.feature_extraction",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Reconstruct the image from all of its patches.",
        "full_name": "sklearn.feature_extraction.image.reconstruct_from_patches_2d",
        "href": "generated/sklearn.feature_extraction.image.reconstruct_from_patches_2d.html#sklearn.feature_extraction.image.reconstruct_from_patches_2d",
        "name": "reconstruct_from_patches_2d",
        "package_name": "module-sklearn.feature_extraction",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Extracts patches from a collection of images.",
        "full_name": "sklearn.feature_extraction.image.PatchExtractor",
        "href": "generated/sklearn.feature_extraction.image.PatchExtractor.html#sklearn.feature_extraction.image.PatchExtractor",
        "name": "PatchExtractor",
        "package_name": "module-sklearn.feature_extraction",
        "params": [
            "patch_size",
            "max_patches",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Convert a collection of text documents to a matrix of token counts.",
        "full_name": "sklearn.feature_extraction.text.CountVectorizer",
        "href": "generated/sklearn.feature_extraction.text.CountVectorizer.html#sklearn.feature_extraction.text.CountVectorizer",
        "name": "CountVectorizer",
        "package_name": "module-sklearn.feature_extraction",
        "params": [
            "input",
            "encoding",
            "decode_error",
            "strip_accents",
            "lowercase",
            "preprocessor",
            "tokenizer",
            "stop_words",
            "token_pattern",
            "ngram_range",
            "analyzer",
            "max_df",
            "min_df",
            "max_features",
            "vocabulary",
            "binary",
            "dtype"
        ],
        "type": "CLASS"
    },
    {
        "description": "Convert a collection of text documents to a matrix of token occurrences.",
        "full_name": "sklearn.feature_extraction.text.HashingVectorizer",
        "href": "generated/sklearn.feature_extraction.text.HashingVectorizer.html#sklearn.feature_extraction.text.HashingVectorizer",
        "name": "HashingVectorizer",
        "package_name": "module-sklearn.feature_extraction",
        "params": [
            "input",
            "encoding",
            "decode_error",
            "strip_accents",
            "lowercase",
            "preprocessor",
            "tokenizer",
            "stop_words",
            "token_pattern",
            "ngram_range",
            "analyzer",
            "n_features",
            "binary",
            "norm",
            "alternate_sign",
            "dtype"
        ],
        "type": "CLASS"
    },
    {
        "description": "Transform a count matrix to a normalized tf or tf-idf representation.",
        "full_name": "sklearn.feature_extraction.text.TfidfTransformer",
        "href": "generated/sklearn.feature_extraction.text.TfidfTransformer.html#sklearn.feature_extraction.text.TfidfTransformer",
        "name": "TfidfTransformer",
        "package_name": "module-sklearn.feature_extraction",
        "params": [
            "norm",
            "use_idf",
            "smooth_idf",
            "sublinear_tf"
        ],
        "type": "CLASS"
    },
    {
        "description": "Convert a collection of raw documents to a matrix of TF-IDF features.",
        "full_name": "sklearn.feature_extraction.text.TfidfVectorizer",
        "href": "generated/sklearn.feature_extraction.text.TfidfVectorizer.html#sklearn.feature_extraction.text.TfidfVectorizer",
        "name": "TfidfVectorizer",
        "package_name": "module-sklearn.feature_extraction",
        "params": [
            "input",
            "encoding",
            "decode_error",
            "strip_accents",
            "lowercase",
            "preprocessor",
            "tokenizer",
            "analyzer",
            "stop_words",
            "token_pattern",
            "ngram_range",
            "max_df",
            "min_df",
            "max_features",
            "vocabulary",
            "binary",
            "dtype",
            "norm",
            "use_idf",
            "smooth_idf",
            "sublinear_tf"
        ],
        "type": "CLASS"
    },
    {
        "description": "Univariate feature selector with configurable strategy.",
        "full_name": "sklearn.feature_selection.GenericUnivariateSelect",
        "href": "generated/sklearn.feature_selection.GenericUnivariateSelect.html#sklearn.feature_selection.GenericUnivariateSelect",
        "name": "GenericUnivariateSelect",
        "package_name": "module-sklearn.feature_selection",
        "params": [
            "score_func",
            "mode",
            "param"
        ],
        "type": "CLASS"
    },
    {
        "description": "Select features according to a percentile of the highest scores.",
        "full_name": "sklearn.feature_selection.SelectPercentile",
        "href": "generated/sklearn.feature_selection.SelectPercentile.html#sklearn.feature_selection.SelectPercentile",
        "name": "SelectPercentile",
        "package_name": "module-sklearn.feature_selection",
        "params": [
            "score_func",
            "percentile"
        ],
        "type": "CLASS"
    },
    {
        "description": "Select features according to the k highest scores.",
        "full_name": "sklearn.feature_selection.SelectKBest",
        "href": "generated/sklearn.feature_selection.SelectKBest.html#sklearn.feature_selection.SelectKBest",
        "name": "SelectKBest",
        "package_name": "module-sklearn.feature_selection",
        "params": [
            "score_func",
            "k"
        ],
        "type": "CLASS"
    },
    {
        "description": "Filter: Select the pvalues below alpha based on a FPR test.",
        "full_name": "sklearn.feature_selection.SelectFpr",
        "href": "generated/sklearn.feature_selection.SelectFpr.html#sklearn.feature_selection.SelectFpr",
        "name": "SelectFpr",
        "package_name": "module-sklearn.feature_selection",
        "params": [
            "score_func",
            "alpha"
        ],
        "type": "CLASS"
    },
    {
        "description": "Filter: Select the p-values for an estimated false discovery rate.",
        "full_name": "sklearn.feature_selection.SelectFdr",
        "href": "generated/sklearn.feature_selection.SelectFdr.html#sklearn.feature_selection.SelectFdr",
        "name": "SelectFdr",
        "package_name": "module-sklearn.feature_selection",
        "params": [
            "score_func",
            "alpha"
        ],
        "type": "CLASS"
    },
    {
        "description": "Meta-transformer for selecting features based on importance weights.",
        "full_name": "sklearn.feature_selection.SelectFromModel",
        "href": "generated/sklearn.feature_selection.SelectFromModel.html#sklearn.feature_selection.SelectFromModel",
        "name": "SelectFromModel",
        "package_name": "module-sklearn.feature_selection",
        "params": [
            "estimator",
            "threshold",
            "prefit",
            "norm_order",
            "max_features",
            "importance_getter"
        ],
        "type": "CLASS"
    },
    {
        "description": "Filter: Select the p-values corresponding to Family-wise error rate.",
        "full_name": "sklearn.feature_selection.SelectFwe",
        "href": "generated/sklearn.feature_selection.SelectFwe.html#sklearn.feature_selection.SelectFwe",
        "name": "SelectFwe",
        "package_name": "module-sklearn.feature_selection",
        "params": [
            "score_func",
            "alpha"
        ],
        "type": "CLASS"
    },
    {
        "description": "Transformer that performs Sequential Feature Selection.",
        "full_name": "sklearn.feature_selection.SequentialFeatureSelector",
        "href": "generated/sklearn.feature_selection.SequentialFeatureSelector.html#sklearn.feature_selection.SequentialFeatureSelector",
        "name": "SequentialFeatureSelector",
        "package_name": "module-sklearn.feature_selection",
        "params": [
            "estimator",
            "n_features_to_select",
            "direction",
            "scoring",
            "cv",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "Feature ranking with recursive feature elimination.",
        "full_name": "sklearn.feature_selection.RFE",
        "href": "generated/sklearn.feature_selection.RFE.html#sklearn.feature_selection.RFE",
        "name": "RFE",
        "package_name": "module-sklearn.feature_selection",
        "params": [
            "estimator",
            "n_features_to_select",
            "step",
            "verbose",
            "importance_getter"
        ],
        "type": "CLASS"
    },
    {
        "description": "Recursive feature elimination with cross-validation to select the number of features.",
        "full_name": "sklearn.feature_selection.RFECV",
        "href": "generated/sklearn.feature_selection.RFECV.html#sklearn.feature_selection.RFECV",
        "name": "RFECV",
        "package_name": "module-sklearn.feature_selection",
        "params": [
            "estimator",
            "step",
            "min_features_to_select",
            "cv",
            "scoring",
            "verbose",
            "n_jobs",
            "importance_getter"
        ],
        "type": "CLASS"
    },
    {
        "description": "Feature selector that removes all low-variance features.",
        "full_name": "sklearn.feature_selection.VarianceThreshold",
        "href": "generated/sklearn.feature_selection.VarianceThreshold.html#sklearn.feature_selection.VarianceThreshold",
        "name": "VarianceThreshold",
        "package_name": "module-sklearn.feature_selection",
        "params": [
            "threshold"
        ],
        "type": "CLASS"
    },
    {
        "description": "Compute chi-squared stats between each non-negative feature and class.",
        "full_name": "sklearn.feature_selection.chi2",
        "href": "generated/sklearn.feature_selection.chi2.html#sklearn.feature_selection.chi2",
        "name": "chi2",
        "package_name": "module-sklearn.feature_selection",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the ANOVA F-value for the provided sample.",
        "full_name": "sklearn.feature_selection.f_classif",
        "href": "generated/sklearn.feature_selection.f_classif.html#sklearn.feature_selection.f_classif",
        "name": "f_classif",
        "package_name": "module-sklearn.feature_selection",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Univariate linear regression tests returning F-statistic and p-values.",
        "full_name": "sklearn.feature_selection.f_regression",
        "href": "generated/sklearn.feature_selection.f_regression.html#sklearn.feature_selection.f_regression",
        "name": "f_regression",
        "package_name": "module-sklearn.feature_selection",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute Pearson\u2019s r for each features and the target.",
        "full_name": "sklearn.feature_selection.r_regression",
        "href": "generated/sklearn.feature_selection.r_regression.html#sklearn.feature_selection.r_regression",
        "name": "r_regression",
        "package_name": "module-sklearn.feature_selection",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Estimate mutual information for a discrete target variable.",
        "full_name": "sklearn.feature_selection.mutual_info_classif",
        "href": "generated/sklearn.feature_selection.mutual_info_classif.html#sklearn.feature_selection.mutual_info_classif",
        "name": "mutual_info_classif",
        "package_name": "module-sklearn.feature_selection",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Estimate mutual information for a continuous target variable.",
        "full_name": "sklearn.feature_selection.mutual_info_regression",
        "href": "generated/sklearn.feature_selection.mutual_info_regression.html#sklearn.feature_selection.mutual_info_regression",
        "name": "mutual_info_regression",
        "package_name": "module-sklearn.feature_selection",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Gaussian process classification (GPC) based on Laplace approximation.",
        "full_name": "sklearn.gaussian_process.GaussianProcessClassifier",
        "href": "generated/sklearn.gaussian_process.GaussianProcessClassifier.html#sklearn.gaussian_process.GaussianProcessClassifier",
        "name": "GaussianProcessClassifier",
        "package_name": "module-sklearn.gaussian_process",
        "params": [
            "kernel",
            "optimizer",
            "n_restarts_optimizer",
            "max_iter_predict",
            "warm_start",
            "copy_X_train",
            "random_state",
            "multi_class",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "Gaussian process regression (GPR).",
        "full_name": "sklearn.gaussian_process.GaussianProcessRegressor",
        "href": "generated/sklearn.gaussian_process.GaussianProcessRegressor.html#sklearn.gaussian_process.GaussianProcessRegressor",
        "name": "GaussianProcessRegressor",
        "package_name": "module-sklearn.gaussian_process",
        "params": [
            "kernel",
            "alpha",
            "optimizer",
            "n_restarts_optimizer",
            "normalize_y",
            "copy_X_train",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Kernel which is composed of a set of other kernels.",
        "full_name": "sklearn.gaussian_process.kernels.CompoundKernel",
        "href": "generated/sklearn.gaussian_process.kernels.CompoundKernel.html#sklearn.gaussian_process.kernels.CompoundKernel",
        "name": "CompoundKernel",
        "package_name": "module-sklearn.gaussian_process",
        "params": [
            "kernels"
        ],
        "type": "CLASS"
    },
    {
        "description": "Constant kernel.",
        "full_name": "sklearn.gaussian_process.kernels.ConstantKernel",
        "href": "generated/sklearn.gaussian_process.kernels.ConstantKernel.html#sklearn.gaussian_process.kernels.ConstantKernel",
        "name": "ConstantKernel",
        "package_name": "module-sklearn.gaussian_process",
        "params": [
            "constant_value",
            "constant_value_bounds"
        ],
        "type": "CLASS"
    },
    {
        "description": "Dot-Product kernel.",
        "full_name": "sklearn.gaussian_process.kernels.DotProduct",
        "href": "generated/sklearn.gaussian_process.kernels.DotProduct.html#sklearn.gaussian_process.kernels.DotProduct",
        "name": "DotProduct",
        "package_name": "module-sklearn.gaussian_process",
        "params": [
            "sigma_0",
            "sigma_0_bounds"
        ],
        "type": "CLASS"
    },
    {
        "description": "Exp-Sine-Squared kernel (aka periodic kernel).",
        "full_name": "sklearn.gaussian_process.kernels.ExpSineSquared",
        "href": "generated/sklearn.gaussian_process.kernels.ExpSineSquared.html#sklearn.gaussian_process.kernels.ExpSineSquared",
        "name": "ExpSineSquared",
        "package_name": "module-sklearn.gaussian_process",
        "params": [
            "length_scale",
            "periodicity",
            "length_scale_bounds",
            "periodicity_bounds"
        ],
        "type": "CLASS"
    },
    {
        "description": "The Exponentiation kernel takes one base kernel and a scalar parameter \\(p\\) and combines them via",
        "full_name": "sklearn.gaussian_process.kernels.Exponentiation",
        "href": "generated/sklearn.gaussian_process.kernels.Exponentiation.html#sklearn.gaussian_process.kernels.Exponentiation",
        "name": "Exponentiation",
        "package_name": "module-sklearn.gaussian_process",
        "params": [
            "kernel",
            "exponent"
        ],
        "type": "CLASS"
    },
    {
        "description": "A kernel hyperparameter\u2019s specification in form of a namedtuple.",
        "full_name": "sklearn.gaussian_process.kernels.Hyperparameter",
        "href": "generated/sklearn.gaussian_process.kernels.Hyperparameter.html#sklearn.gaussian_process.kernels.Hyperparameter",
        "name": "Hyperparameter",
        "package_name": "module-sklearn.gaussian_process",
        "params": [],
        "type": "CLASS"
    },
    {
        "description": "Base class for all kernels.",
        "full_name": "sklearn.gaussian_process.kernels.Kernel",
        "href": "generated/sklearn.gaussian_process.kernels.Kernel.html#sklearn.gaussian_process.kernels.Kernel",
        "name": "Kernel",
        "package_name": "module-sklearn.gaussian_process",
        "params": [],
        "type": "CLASS"
    },
    {
        "description": "Matern kernel.",
        "full_name": "sklearn.gaussian_process.kernels.Matern",
        "href": "generated/sklearn.gaussian_process.kernels.Matern.html#sklearn.gaussian_process.kernels.Matern",
        "name": "Matern",
        "package_name": "module-sklearn.gaussian_process",
        "params": [
            "length_scale",
            "length_scale_bounds",
            "nu"
        ],
        "type": "CLASS"
    },
    {
        "description": "Wrapper for kernels in sklearn.metrics.pairwise.",
        "full_name": "sklearn.gaussian_process.kernels.PairwiseKernel",
        "href": "generated/sklearn.gaussian_process.kernels.PairwiseKernel.html#sklearn.gaussian_process.kernels.PairwiseKernel",
        "name": "PairwiseKernel",
        "package_name": "module-sklearn.gaussian_process",
        "params": [
            "gamma",
            "gamma_bounds",
            "metric",
            "pairwise_kernels_kwargs"
        ],
        "type": "CLASS"
    },
    {
        "description": "The Product kernel takes two kernels \\(k_1\\) and \\(k_2\\) and combines them via",
        "full_name": "sklearn.gaussian_process.kernels.Product",
        "href": "generated/sklearn.gaussian_process.kernels.Product.html#sklearn.gaussian_process.kernels.Product",
        "name": "Product",
        "package_name": "module-sklearn.gaussian_process",
        "params": [
            "k1",
            "k2"
        ],
        "type": "CLASS"
    },
    {
        "description": "Radial-basis function kernel (aka squared-exponential kernel).",
        "full_name": "sklearn.gaussian_process.kernels.RBF",
        "href": "generated/sklearn.gaussian_process.kernels.RBF.html#sklearn.gaussian_process.kernels.RBF",
        "name": "RBF",
        "package_name": "module-sklearn.gaussian_process",
        "params": [
            "length_scale",
            "length_scale_bounds"
        ],
        "type": "CLASS"
    },
    {
        "description": "Rational Quadratic kernel.",
        "full_name": "sklearn.gaussian_process.kernels.RationalQuadratic",
        "href": "generated/sklearn.gaussian_process.kernels.RationalQuadratic.html#sklearn.gaussian_process.kernels.RationalQuadratic",
        "name": "RationalQuadratic",
        "package_name": "module-sklearn.gaussian_process",
        "params": [
            "length_scale",
            "alpha",
            "length_scale_bounds",
            "alpha_bounds"
        ],
        "type": "CLASS"
    },
    {
        "description": "The Sum kernel takes two kernels \\(k_1\\) and \\(k_2\\) and combines them via",
        "full_name": "sklearn.gaussian_process.kernels.Sum",
        "href": "generated/sklearn.gaussian_process.kernels.Sum.html#sklearn.gaussian_process.kernels.Sum",
        "name": "Sum",
        "package_name": "module-sklearn.gaussian_process",
        "params": [
            "k1",
            "k2"
        ],
        "type": "CLASS"
    },
    {
        "description": "White kernel.",
        "full_name": "sklearn.gaussian_process.kernels.WhiteKernel",
        "href": "generated/sklearn.gaussian_process.kernels.WhiteKernel.html#sklearn.gaussian_process.kernels.WhiteKernel",
        "name": "WhiteKernel",
        "package_name": "module-sklearn.gaussian_process",
        "params": [
            "noise_level",
            "noise_level_bounds"
        ],
        "type": "CLASS"
    },
    {
        "description": "Imputation transformer for completing missing values.",
        "full_name": "sklearn.impute.SimpleImputer",
        "href": "generated/sklearn.impute.SimpleImputer.html#sklearn.impute.SimpleImputer",
        "name": "SimpleImputer",
        "package_name": "module-sklearn.impute",
        "params": [
            "missing_values",
            "strategy",
            "fill_value",
            "verbose",
            "copy",
            "add_indicator"
        ],
        "type": "CLASS"
    },
    {
        "description": "Multivariate imputer that estimates each feature from all the others.",
        "full_name": "sklearn.impute.IterativeImputer",
        "href": "generated/sklearn.impute.IterativeImputer.html#sklearn.impute.IterativeImputer",
        "name": "IterativeImputer",
        "package_name": "module-sklearn.impute",
        "params": [
            "estimator",
            "missing_values",
            "sample_posterior",
            "max_iter",
            "tol",
            "n_nearest_features",
            "initial_strategy",
            "imputation_order",
            "skip_complete",
            "min_value",
            "max_value",
            "verbose",
            "random_state",
            "add_indicator"
        ],
        "type": "CLASS"
    },
    {
        "description": "Binary indicators for missing values.",
        "full_name": "sklearn.impute.MissingIndicator",
        "href": "generated/sklearn.impute.MissingIndicator.html#sklearn.impute.MissingIndicator",
        "name": "MissingIndicator",
        "package_name": "module-sklearn.impute",
        "params": [
            "missing_values",
            "features",
            "sparse",
            "error_on_new"
        ],
        "type": "CLASS"
    },
    {
        "description": "Imputation for completing missing values using k-Nearest Neighbors.",
        "full_name": "sklearn.impute.KNNImputer",
        "href": "generated/sklearn.impute.KNNImputer.html#sklearn.impute.KNNImputer",
        "name": "KNNImputer",
        "package_name": "module-sklearn.impute",
        "params": [
            "missing_values",
            "n_neighbors",
            "weights",
            "metric",
            "copy",
            "add_indicator"
        ],
        "type": "CLASS"
    },
    {
        "description": "Partial dependence of features.",
        "full_name": "sklearn.inspection.partial_dependence",
        "href": "generated/sklearn.inspection.partial_dependence.html#sklearn.inspection.partial_dependence",
        "name": "partial_dependence",
        "package_name": "module-sklearn.inspection",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Permutation importance for feature evaluation [Rd9e56ef97513-BRE].",
        "full_name": "sklearn.inspection.permutation_importance",
        "href": "generated/sklearn.inspection.permutation_importance.html#sklearn.inspection.permutation_importance",
        "name": "permutation_importance",
        "package_name": "module-sklearn.inspection",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Partial Dependence Plot (PDP).",
        "full_name": "sklearn.inspection.PartialDependenceDisplay",
        "href": "generated/sklearn.inspection.PartialDependenceDisplay.html#sklearn.inspection.PartialDependenceDisplay",
        "name": "PartialDependenceDisplay",
        "package_name": "module-sklearn.inspection",
        "params": [
            "pd_results",
            "features",
            "feature_names",
            "target_idx",
            "pdp_lim",
            "deciles",
            "kind",
            "subsample",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "DEPRECATED: Function plot_partial_dependence is deprecated in 1.0 and will be removed in 1.2.",
        "full_name": "sklearn.inspection.plot_partial_dependence",
        "href": "generated/sklearn.inspection.plot_partial_dependence.html#sklearn.inspection.plot_partial_dependence",
        "name": "plot_partial_dependence",
        "package_name": "module-sklearn.inspection",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Isotonic regression model.",
        "full_name": "sklearn.isotonic.IsotonicRegression",
        "href": "generated/sklearn.isotonic.IsotonicRegression.html#sklearn.isotonic.IsotonicRegression",
        "name": "IsotonicRegression",
        "package_name": "module-sklearn.isotonic",
        "params": [
            "y_min",
            "y_max",
            "increasing",
            "out_of_bounds"
        ],
        "type": "CLASS"
    },
    {
        "description": "Determine whether y is monotonically correlated with x.",
        "full_name": "sklearn.isotonic.check_increasing",
        "href": "generated/sklearn.isotonic.check_increasing.html#sklearn.isotonic.check_increasing",
        "name": "check_increasing",
        "package_name": "module-sklearn.isotonic",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Solve the isotonic regression model.",
        "full_name": "sklearn.isotonic.isotonic_regression",
        "href": "generated/sklearn.isotonic.isotonic_regression.html#sklearn.isotonic.isotonic_regression",
        "name": "isotonic_regression",
        "package_name": "module-sklearn.isotonic",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Approximate feature map for additive chi2 kernel.",
        "full_name": "sklearn.kernel_approximation.AdditiveChi2Sampler",
        "href": "generated/sklearn.kernel_approximation.AdditiveChi2Sampler.html#sklearn.kernel_approximation.AdditiveChi2Sampler",
        "name": "AdditiveChi2Sampler",
        "package_name": "module-sklearn.kernel_approximation",
        "params": [
            "sample_steps",
            "sample_interval"
        ],
        "type": "CLASS"
    },
    {
        "description": "Approximate a kernel map using a subset of the training data.",
        "full_name": "sklearn.kernel_approximation.Nystroem",
        "href": "generated/sklearn.kernel_approximation.Nystroem.html#sklearn.kernel_approximation.Nystroem",
        "name": "Nystroem",
        "package_name": "module-sklearn.kernel_approximation",
        "params": [
            "kernel",
            "gamma",
            "coef0",
            "degree",
            "kernel_params",
            "n_components",
            "random_state",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "Polynomial kernel approximation via Tensor Sketch.",
        "full_name": "sklearn.kernel_approximation.PolynomialCountSketch",
        "href": "generated/sklearn.kernel_approximation.PolynomialCountSketch.html#sklearn.kernel_approximation.PolynomialCountSketch",
        "name": "PolynomialCountSketch",
        "package_name": "module-sklearn.kernel_approximation",
        "params": [
            "gamma",
            "degree",
            "coef0",
            "n_components",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Approximate a RBF kernel feature map using random Fourier features.",
        "full_name": "sklearn.kernel_approximation.RBFSampler",
        "href": "generated/sklearn.kernel_approximation.RBFSampler.html#sklearn.kernel_approximation.RBFSampler",
        "name": "RBFSampler",
        "package_name": "module-sklearn.kernel_approximation",
        "params": [
            "gamma",
            "n_components",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Approximate feature map for \u201cskewed chi-squared\u201d kernel.",
        "full_name": "sklearn.kernel_approximation.SkewedChi2Sampler",
        "href": "generated/sklearn.kernel_approximation.SkewedChi2Sampler.html#sklearn.kernel_approximation.SkewedChi2Sampler",
        "name": "SkewedChi2Sampler",
        "package_name": "module-sklearn.kernel_approximation",
        "params": [
            "skewedness",
            "n_components",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Kernel ridge regression.",
        "full_name": "sklearn.kernel_ridge.KernelRidge",
        "href": "generated/sklearn.kernel_ridge.KernelRidge.html#sklearn.kernel_ridge.KernelRidge",
        "name": "KernelRidge",
        "package_name": "module-sklearn.kernel_ridge",
        "params": [
            "alpha",
            "kernel",
            "gamma",
            "degree",
            "coef0",
            "kernel_params"
        ],
        "type": "CLASS"
    },
    {
        "description": "Logistic Regression (aka logit, MaxEnt) classifier.",
        "full_name": "sklearn.linear_model.LogisticRegression",
        "href": "generated/sklearn.linear_model.LogisticRegression.html#sklearn.linear_model.LogisticRegression",
        "name": "LogisticRegression",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "penalty",
            "dual",
            "tol",
            "C",
            "fit_intercept",
            "intercept_scaling",
            "class_weight",
            "random_state",
            "solver",
            "max_iter",
            "multi_class",
            "verbose",
            "warm_start",
            "n_jobs",
            "l1_ratio"
        ],
        "type": "CLASS"
    },
    {
        "description": "Logistic Regression CV (aka logit, MaxEnt) classifier.",
        "full_name": "sklearn.linear_model.LogisticRegressionCV",
        "href": "generated/sklearn.linear_model.LogisticRegressionCV.html#sklearn.linear_model.LogisticRegressionCV",
        "name": "LogisticRegressionCV",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "Cs",
            "fit_intercept",
            "cv",
            "dual",
            "penalty",
            "scoring",
            "solver",
            "tol",
            "max_iter",
            "class_weight",
            "n_jobs",
            "verbose",
            "refit",
            "intercept_scaling",
            "multi_class",
            "random_state",
            "l1_ratios"
        ],
        "type": "CLASS"
    },
    {
        "description": "Passive Aggressive Classifier.",
        "full_name": "sklearn.linear_model.PassiveAggressiveClassifier",
        "href": "generated/sklearn.linear_model.PassiveAggressiveClassifier.html#sklearn.linear_model.PassiveAggressiveClassifier",
        "name": "PassiveAggressiveClassifier",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "C",
            "fit_intercept",
            "max_iter",
            "tol",
            "early_stopping",
            "validation_fraction",
            "n_iter_no_change",
            "shuffle",
            "verbose",
            "loss",
            "n_jobs",
            "random_state",
            "warm_start",
            "class_weight",
            "average"
        ],
        "type": "CLASS"
    },
    {
        "description": "Linear perceptron classifier.",
        "full_name": "sklearn.linear_model.Perceptron",
        "href": "generated/sklearn.linear_model.Perceptron.html#sklearn.linear_model.Perceptron",
        "name": "Perceptron",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "penalty",
            "alpha",
            "l1_ratio",
            "fit_intercept",
            "max_iter",
            "tol",
            "shuffle",
            "verbose",
            "eta0",
            "n_jobs",
            "random_state",
            "early_stopping",
            "validation_fraction",
            "n_iter_no_change",
            "class_weight",
            "warm_start"
        ],
        "type": "CLASS"
    },
    {
        "description": "Classifier using Ridge regression.",
        "full_name": "sklearn.linear_model.RidgeClassifier",
        "href": "generated/sklearn.linear_model.RidgeClassifier.html#sklearn.linear_model.RidgeClassifier",
        "name": "RidgeClassifier",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "alpha",
            "fit_intercept",
            "normalize",
            "copy_X",
            "max_iter",
            "tol",
            "class_weight",
            "solver",
            "positive",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Ridge classifier with built-in cross-validation.",
        "full_name": "sklearn.linear_model.RidgeClassifierCV",
        "href": "generated/sklearn.linear_model.RidgeClassifierCV.html#sklearn.linear_model.RidgeClassifierCV",
        "name": "RidgeClassifierCV",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "alphas",
            "fit_intercept",
            "normalize",
            "scoring",
            "cv",
            "class_weight",
            "store_cv_values"
        ],
        "type": "CLASS"
    },
    {
        "description": "Linear classifiers (SVM, logistic regression, etc.) with SGD training.",
        "full_name": "sklearn.linear_model.SGDClassifier",
        "href": "generated/sklearn.linear_model.SGDClassifier.html#sklearn.linear_model.SGDClassifier",
        "name": "SGDClassifier",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "loss",
            "penalty",
            "alpha",
            "l1_ratio",
            "fit_intercept",
            "max_iter",
            "tol",
            "shuffle",
            "verbose",
            "epsilon",
            "n_jobs",
            "random_state",
            "learning_rate",
            "eta0",
            "power_t",
            "early_stopping",
            "validation_fraction",
            "n_iter_no_change",
            "class_weight",
            "warm_start",
            "average"
        ],
        "type": "CLASS"
    },
    {
        "description": "Solves linear One-Class SVM using Stochastic Gradient Descent.",
        "full_name": "sklearn.linear_model.SGDOneClassSVM",
        "href": "generated/sklearn.linear_model.SGDOneClassSVM.html#sklearn.linear_model.SGDOneClassSVM",
        "name": "SGDOneClassSVM",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "nu",
            "fit_intercept",
            "max_iter",
            "tol",
            "shuffle",
            "verbose",
            "random_state",
            "learning_rate",
            "eta0",
            "power_t",
            "warm_start",
            "average"
        ],
        "type": "CLASS"
    },
    {
        "description": "Ordinary least squares Linear Regression.",
        "full_name": "sklearn.linear_model.LinearRegression",
        "href": "generated/sklearn.linear_model.LinearRegression.html#sklearn.linear_model.LinearRegression",
        "name": "LinearRegression",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "fit_intercept",
            "normalize",
            "copy_X",
            "n_jobs",
            "positive"
        ],
        "type": "CLASS"
    },
    {
        "description": "Linear least squares with l2 regularization.",
        "full_name": "sklearn.linear_model.Ridge",
        "href": "generated/sklearn.linear_model.Ridge.html#sklearn.linear_model.Ridge",
        "name": "Ridge",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "alpha",
            "fit_intercept",
            "normalize",
            "copy_X",
            "max_iter",
            "tol",
            "solver",
            "positive",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Ridge regression with built-in cross-validation.",
        "full_name": "sklearn.linear_model.RidgeCV",
        "href": "generated/sklearn.linear_model.RidgeCV.html#sklearn.linear_model.RidgeCV",
        "name": "RidgeCV",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "alphas",
            "fit_intercept",
            "normalize",
            "scoring",
            "cv",
            "gcv_mode",
            "store_cv_values",
            "alpha_per_target"
        ],
        "type": "CLASS"
    },
    {
        "description": "Linear model fitted by minimizing a regularized empirical loss with SGD.",
        "full_name": "sklearn.linear_model.SGDRegressor",
        "href": "generated/sklearn.linear_model.SGDRegressor.html#sklearn.linear_model.SGDRegressor",
        "name": "SGDRegressor",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "loss",
            "penalty",
            "alpha",
            "l1_ratio",
            "fit_intercept",
            "max_iter",
            "tol",
            "shuffle",
            "verbose",
            "epsilon",
            "random_state",
            "learning_rate",
            "eta0",
            "power_t",
            "early_stopping",
            "validation_fraction",
            "n_iter_no_change",
            "warm_start",
            "average"
        ],
        "type": "CLASS"
    },
    {
        "description": "Linear regression with combined L1 and L2 priors as regularizer.",
        "full_name": "sklearn.linear_model.ElasticNet",
        "href": "generated/sklearn.linear_model.ElasticNet.html#sklearn.linear_model.ElasticNet",
        "name": "ElasticNet",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "alpha",
            "l1_ratio",
            "fit_intercept",
            "normalize",
            "precompute",
            "max_iter",
            "copy_X",
            "tol",
            "warm_start",
            "positive",
            "random_state",
            "selection"
        ],
        "type": "CLASS"
    },
    {
        "description": "Elastic Net model with iterative fitting along a regularization path.",
        "full_name": "sklearn.linear_model.ElasticNetCV",
        "href": "generated/sklearn.linear_model.ElasticNetCV.html#sklearn.linear_model.ElasticNetCV",
        "name": "ElasticNetCV",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "l1_ratio",
            "eps",
            "n_alphas",
            "alphas",
            "fit_intercept",
            "normalize",
            "precompute",
            "max_iter",
            "tol",
            "cv",
            "copy_X",
            "verbose",
            "n_jobs",
            "positive",
            "random_state",
            "selection"
        ],
        "type": "CLASS"
    },
    {
        "description": "Least Angle Regression model a.k.a.",
        "full_name": "sklearn.linear_model.Lars",
        "href": "generated/sklearn.linear_model.Lars.html#sklearn.linear_model.Lars",
        "name": "Lars",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "fit_intercept",
            "verbose",
            "normalize",
            "precompute",
            "n_nonzero_coefs",
            "eps",
            "copy_X",
            "fit_path",
            "jitter",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Cross-validated Least Angle Regression model.",
        "full_name": "sklearn.linear_model.LarsCV",
        "href": "generated/sklearn.linear_model.LarsCV.html#sklearn.linear_model.LarsCV",
        "name": "LarsCV",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "fit_intercept",
            "verbose",
            "max_iter",
            "normalize",
            "precompute",
            "cv",
            "max_n_alphas",
            "n_jobs",
            "eps",
            "copy_X"
        ],
        "type": "CLASS"
    },
    {
        "description": "Linear Model trained with L1 prior as regularizer (aka the Lasso).",
        "full_name": "sklearn.linear_model.Lasso",
        "href": "generated/sklearn.linear_model.Lasso.html#sklearn.linear_model.Lasso",
        "name": "Lasso",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "alpha",
            "fit_intercept",
            "normalize",
            "precompute",
            "copy_X",
            "max_iter",
            "tol",
            "warm_start",
            "positive",
            "random_state",
            "selection"
        ],
        "type": "CLASS"
    },
    {
        "description": "Lasso linear model with iterative fitting along a regularization path.",
        "full_name": "sklearn.linear_model.LassoCV",
        "href": "generated/sklearn.linear_model.LassoCV.html#sklearn.linear_model.LassoCV",
        "name": "LassoCV",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "eps",
            "n_alphas",
            "alphas",
            "fit_intercept",
            "normalize",
            "precompute",
            "max_iter",
            "tol",
            "copy_X",
            "cv",
            "verbose",
            "n_jobs",
            "positive",
            "random_state",
            "selection"
        ],
        "type": "CLASS"
    },
    {
        "description": "Lasso model fit with Least Angle Regression a.k.a.",
        "full_name": "sklearn.linear_model.LassoLars",
        "href": "generated/sklearn.linear_model.LassoLars.html#sklearn.linear_model.LassoLars",
        "name": "LassoLars",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "alpha",
            "fit_intercept",
            "verbose",
            "normalize",
            "precompute",
            "max_iter",
            "eps",
            "copy_X",
            "fit_path",
            "positive",
            "jitter",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Cross-validated Lasso, using the LARS algorithm.",
        "full_name": "sklearn.linear_model.LassoLarsCV",
        "href": "generated/sklearn.linear_model.LassoLarsCV.html#sklearn.linear_model.LassoLarsCV",
        "name": "LassoLarsCV",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "fit_intercept",
            "verbose",
            "max_iter",
            "normalize",
            "precompute",
            "cv",
            "max_n_alphas",
            "n_jobs",
            "eps",
            "copy_X",
            "positive"
        ],
        "type": "CLASS"
    },
    {
        "description": "Lasso model fit with Lars using BIC or AIC for model selection.",
        "full_name": "sklearn.linear_model.LassoLarsIC",
        "href": "generated/sklearn.linear_model.LassoLarsIC.html#sklearn.linear_model.LassoLarsIC",
        "name": "LassoLarsIC",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "criterion",
            "fit_intercept",
            "verbose",
            "normalize",
            "precompute",
            "max_iter",
            "eps",
            "copy_X",
            "positive"
        ],
        "type": "CLASS"
    },
    {
        "description": "Orthogonal Matching Pursuit model (OMP).",
        "full_name": "sklearn.linear_model.OrthogonalMatchingPursuit",
        "href": "generated/sklearn.linear_model.OrthogonalMatchingPursuit.html#sklearn.linear_model.OrthogonalMatchingPursuit",
        "name": "OrthogonalMatchingPursuit",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "n_nonzero_coefs",
            "tol",
            "fit_intercept",
            "normalize",
            "precompute"
        ],
        "type": "CLASS"
    },
    {
        "description": "Cross-validated Orthogonal Matching Pursuit model (OMP).",
        "full_name": "sklearn.linear_model.OrthogonalMatchingPursuitCV",
        "href": "generated/sklearn.linear_model.OrthogonalMatchingPursuitCV.html#sklearn.linear_model.OrthogonalMatchingPursuitCV",
        "name": "OrthogonalMatchingPursuitCV",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "copy",
            "fit_intercept",
            "normalize",
            "max_iter",
            "cv",
            "n_jobs",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "Bayesian ARD regression.",
        "full_name": "sklearn.linear_model.ARDRegression",
        "href": "generated/sklearn.linear_model.ARDRegression.html#sklearn.linear_model.ARDRegression",
        "name": "ARDRegression",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "n_iter",
            "tol",
            "alpha_1",
            "alpha_2",
            "lambda_1",
            "lambda_2",
            "compute_score",
            "threshold_lambda",
            "fit_intercept",
            "normalize",
            "copy_X",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "Bayesian ridge regression.",
        "full_name": "sklearn.linear_model.BayesianRidge",
        "href": "generated/sklearn.linear_model.BayesianRidge.html#sklearn.linear_model.BayesianRidge",
        "name": "BayesianRidge",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "n_iter",
            "tol",
            "alpha_1",
            "alpha_2",
            "lambda_1",
            "lambda_2",
            "alpha_init",
            "lambda_init",
            "compute_score",
            "fit_intercept",
            "normalize",
            "copy_X",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "Multi-task ElasticNet model trained with L1/L2 mixed-norm as regularizer.",
        "full_name": "sklearn.linear_model.MultiTaskElasticNet",
        "href": "generated/sklearn.linear_model.MultiTaskElasticNet.html#sklearn.linear_model.MultiTaskElasticNet",
        "name": "MultiTaskElasticNet",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "alpha",
            "l1_ratio",
            "fit_intercept",
            "normalize",
            "copy_X",
            "max_iter",
            "tol",
            "warm_start",
            "random_state",
            "selection"
        ],
        "type": "CLASS"
    },
    {
        "description": "Multi-task L1/L2 ElasticNet with built-in cross-validation.",
        "full_name": "sklearn.linear_model.MultiTaskElasticNetCV",
        "href": "generated/sklearn.linear_model.MultiTaskElasticNetCV.html#sklearn.linear_model.MultiTaskElasticNetCV",
        "name": "MultiTaskElasticNetCV",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "l1_ratio",
            "eps",
            "n_alphas",
            "alphas",
            "fit_intercept",
            "normalize",
            "max_iter",
            "tol",
            "cv",
            "copy_X",
            "verbose",
            "n_jobs",
            "random_state",
            "selection"
        ],
        "type": "CLASS"
    },
    {
        "description": "Multi-task Lasso model trained with L1/L2 mixed-norm as regularizer.",
        "full_name": "sklearn.linear_model.MultiTaskLasso",
        "href": "generated/sklearn.linear_model.MultiTaskLasso.html#sklearn.linear_model.MultiTaskLasso",
        "name": "MultiTaskLasso",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "alpha",
            "fit_intercept",
            "normalize",
            "copy_X",
            "max_iter",
            "tol",
            "warm_start",
            "random_state",
            "selection"
        ],
        "type": "CLASS"
    },
    {
        "description": "Multi-task Lasso model trained with L1/L2 mixed-norm as regularizer.",
        "full_name": "sklearn.linear_model.MultiTaskLassoCV",
        "href": "generated/sklearn.linear_model.MultiTaskLassoCV.html#sklearn.linear_model.MultiTaskLassoCV",
        "name": "MultiTaskLassoCV",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "eps",
            "n_alphas",
            "alphas",
            "fit_intercept",
            "normalize",
            "max_iter",
            "tol",
            "copy_X",
            "cv",
            "verbose",
            "n_jobs",
            "random_state",
            "selection"
        ],
        "type": "CLASS"
    },
    {
        "description": "Linear regression model that is robust to outliers.",
        "full_name": "sklearn.linear_model.HuberRegressor",
        "href": "generated/sklearn.linear_model.HuberRegressor.html#sklearn.linear_model.HuberRegressor",
        "name": "HuberRegressor",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "epsilon",
            "max_iter",
            "alpha",
            "warm_start",
            "fit_intercept",
            "tol"
        ],
        "type": "CLASS"
    },
    {
        "description": "Linear regression model that predicts conditional quantiles.",
        "full_name": "sklearn.linear_model.QuantileRegressor",
        "href": "generated/sklearn.linear_model.QuantileRegressor.html#sklearn.linear_model.QuantileRegressor",
        "name": "QuantileRegressor",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "quantile",
            "alpha",
            "fit_intercept",
            "solver",
            "solver_options"
        ],
        "type": "CLASS"
    },
    {
        "description": "RANSAC (RANdom SAmple Consensus) algorithm.",
        "full_name": "sklearn.linear_model.RANSACRegressor",
        "href": "generated/sklearn.linear_model.RANSACRegressor.html#sklearn.linear_model.RANSACRegressor",
        "name": "RANSACRegressor",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "base_estimator",
            "min_samples",
            "residual_threshold",
            "is_data_valid",
            "is_model_valid",
            "max_trials",
            "max_skips",
            "stop_n_inliers",
            "stop_score",
            "stop_probability",
            "loss",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Theil-Sen Estimator: robust multivariate regression model.",
        "full_name": "sklearn.linear_model.TheilSenRegressor",
        "href": "generated/sklearn.linear_model.TheilSenRegressor.html#sklearn.linear_model.TheilSenRegressor",
        "name": "TheilSenRegressor",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "fit_intercept",
            "copy_X",
            "max_subpopulation",
            "n_subsamples",
            "max_iter",
            "tol",
            "random_state",
            "n_jobs",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "Generalized Linear Model with a Poisson distribution.",
        "full_name": "sklearn.linear_model.PoissonRegressor",
        "href": "generated/sklearn.linear_model.PoissonRegressor.html#sklearn.linear_model.PoissonRegressor",
        "name": "PoissonRegressor",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "alpha",
            "fit_intercept",
            "max_iter",
            "tol",
            "warm_start",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "Generalized Linear Model with a Tweedie distribution.",
        "full_name": "sklearn.linear_model.TweedieRegressor",
        "href": "generated/sklearn.linear_model.TweedieRegressor.html#sklearn.linear_model.TweedieRegressor",
        "name": "TweedieRegressor",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "power",
            "alpha",
            "fit_intercept",
            "link",
            "max_iter",
            "tol",
            "warm_start",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "Generalized Linear Model with a Gamma distribution.",
        "full_name": "sklearn.linear_model.GammaRegressor",
        "href": "generated/sklearn.linear_model.GammaRegressor.html#sklearn.linear_model.GammaRegressor",
        "name": "GammaRegressor",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "alpha",
            "fit_intercept",
            "max_iter",
            "tol",
            "warm_start",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "Passive Aggressive Regressor.",
        "full_name": "sklearn.linear_model.PassiveAggressiveRegressor",
        "href": "generated/sklearn.linear_model.PassiveAggressiveRegressor.html#sklearn.linear_model.PassiveAggressiveRegressor",
        "name": "PassiveAggressiveRegressor",
        "package_name": "module-sklearn.linear_model",
        "params": [
            "C",
            "fit_intercept",
            "max_iter",
            "tol",
            "early_stopping",
            "validation_fraction",
            "n_iter_no_change",
            "shuffle",
            "verbose",
            "loss",
            "epsilon",
            "random_state",
            "warm_start",
            "average"
        ],
        "type": "CLASS"
    },
    {
        "description": "Compute elastic net path with coordinate descent.",
        "full_name": "sklearn.linear_model.enet_path",
        "href": "generated/sklearn.linear_model.enet_path.html#sklearn.linear_model.enet_path",
        "name": "enet_path",
        "package_name": "module-sklearn.linear_model",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute Least Angle Regression or Lasso path using LARS algorithm [1]",
        "full_name": "sklearn.linear_model.lars_path",
        "href": "generated/sklearn.linear_model.lars_path.html#sklearn.linear_model.lars_path",
        "name": "lars_path",
        "package_name": "module-sklearn.linear_model",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "lars_path in the sufficient stats mode [1]",
        "full_name": "sklearn.linear_model.lars_path_gram",
        "href": "generated/sklearn.linear_model.lars_path_gram.html#sklearn.linear_model.lars_path_gram",
        "name": "lars_path_gram",
        "package_name": "module-sklearn.linear_model",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute Lasso path with coordinate descent.",
        "full_name": "sklearn.linear_model.lasso_path",
        "href": "generated/sklearn.linear_model.lasso_path.html#sklearn.linear_model.lasso_path",
        "name": "lasso_path",
        "package_name": "module-sklearn.linear_model",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Orthogonal Matching Pursuit (OMP).",
        "full_name": "sklearn.linear_model.orthogonal_mp",
        "href": "generated/sklearn.linear_model.orthogonal_mp.html#sklearn.linear_model.orthogonal_mp",
        "name": "orthogonal_mp",
        "package_name": "module-sklearn.linear_model",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Gram Orthogonal Matching Pursuit (OMP).",
        "full_name": "sklearn.linear_model.orthogonal_mp_gram",
        "href": "generated/sklearn.linear_model.orthogonal_mp_gram.html#sklearn.linear_model.orthogonal_mp_gram",
        "name": "orthogonal_mp_gram",
        "package_name": "module-sklearn.linear_model",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Solve the ridge equation by the method of normal equations.",
        "full_name": "sklearn.linear_model.ridge_regression",
        "href": "generated/sklearn.linear_model.ridge_regression.html#sklearn.linear_model.ridge_regression",
        "name": "ridge_regression",
        "package_name": "module-sklearn.linear_model",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Isomap Embedding.",
        "full_name": "sklearn.manifold.Isomap",
        "href": "generated/sklearn.manifold.Isomap.html#sklearn.manifold.Isomap",
        "name": "Isomap",
        "package_name": "module-sklearn.manifold",
        "params": [
            "n_neighbors",
            "n_components",
            "eigen_solver",
            "tol",
            "max_iter",
            "path_method",
            "neighbors_algorithm",
            "n_jobs",
            "metric",
            "p",
            "metric_params"
        ],
        "type": "CLASS"
    },
    {
        "description": "Locally Linear Embedding.",
        "full_name": "sklearn.manifold.LocallyLinearEmbedding",
        "href": "generated/sklearn.manifold.LocallyLinearEmbedding.html#sklearn.manifold.LocallyLinearEmbedding",
        "name": "LocallyLinearEmbedding",
        "package_name": "module-sklearn.manifold",
        "params": [
            "n_neighbors",
            "n_components",
            "reg",
            "eigen_solver",
            "tol",
            "max_iter",
            "method",
            "hessian_tol",
            "modified_tol",
            "neighbors_algorithm",
            "random_state",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "Multidimensional scaling.",
        "full_name": "sklearn.manifold.MDS",
        "href": "generated/sklearn.manifold.MDS.html#sklearn.manifold.MDS",
        "name": "MDS",
        "package_name": "module-sklearn.manifold",
        "params": [
            "n_components",
            "metric",
            "n_init",
            "max_iter",
            "verbose",
            "eps",
            "n_jobs",
            "random_state",
            "dissimilarity"
        ],
        "type": "CLASS"
    },
    {
        "description": "Spectral embedding for non-linear dimensionality reduction.",
        "full_name": "sklearn.manifold.SpectralEmbedding",
        "href": "generated/sklearn.manifold.SpectralEmbedding.html#sklearn.manifold.SpectralEmbedding",
        "name": "SpectralEmbedding",
        "package_name": "module-sklearn.manifold",
        "params": [
            "n_components",
            "affinity",
            "gamma",
            "random_state",
            "eigen_solver",
            "n_neighbors",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "T-distributed Stochastic Neighbor Embedding.",
        "full_name": "sklearn.manifold.TSNE",
        "href": "generated/sklearn.manifold.TSNE.html#sklearn.manifold.TSNE",
        "name": "TSNE",
        "package_name": "module-sklearn.manifold",
        "params": [
            "n_components",
            "perplexity",
            "early_exaggeration",
            "learning_rate",
            "n_iter",
            "n_iter_without_progress",
            "min_grad_norm",
            "metric",
            "init",
            "verbose",
            "random_state",
            "method",
            "angle",
            "n_jobs",
            "square_distances"
        ],
        "type": "CLASS"
    },
    {
        "description": "Perform a Locally Linear Embedding analysis on the data.",
        "full_name": "sklearn.manifold.locally_linear_embedding",
        "href": "generated/sklearn.manifold.locally_linear_embedding.html#sklearn.manifold.locally_linear_embedding",
        "name": "locally_linear_embedding",
        "package_name": "module-sklearn.manifold",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute multidimensional scaling using the SMACOF algorithm.",
        "full_name": "sklearn.manifold.smacof",
        "href": "generated/sklearn.manifold.smacof.html#sklearn.manifold.smacof",
        "name": "smacof",
        "package_name": "module-sklearn.manifold",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Project the sample on the first eigenvectors of the graph Laplacian.",
        "full_name": "sklearn.manifold.spectral_embedding",
        "href": "generated/sklearn.manifold.spectral_embedding.html#sklearn.manifold.spectral_embedding",
        "name": "spectral_embedding",
        "package_name": "module-sklearn.manifold",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Expresses to what extent the local structure is retained.",
        "full_name": "sklearn.manifold.trustworthiness",
        "href": "generated/sklearn.manifold.trustworthiness.html#sklearn.manifold.trustworthiness",
        "name": "trustworthiness",
        "package_name": "module-sklearn.manifold",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Determine scorer from user options.",
        "full_name": "sklearn.metrics.check_scoring",
        "href": "generated/sklearn.metrics.check_scoring.html#sklearn.metrics.check_scoring",
        "name": "check_scoring",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Get a scorer from string.",
        "full_name": "sklearn.metrics.get_scorer",
        "href": "generated/sklearn.metrics.get_scorer.html#sklearn.metrics.get_scorer",
        "name": "get_scorer",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Make a scorer from a performance metric or loss function.",
        "full_name": "sklearn.metrics.make_scorer",
        "href": "generated/sklearn.metrics.make_scorer.html#sklearn.metrics.make_scorer",
        "name": "make_scorer",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Accuracy classification score.",
        "full_name": "sklearn.metrics.accuracy_score",
        "href": "generated/sklearn.metrics.accuracy_score.html#sklearn.metrics.accuracy_score",
        "name": "accuracy_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute Area Under the Curve (AUC) using the trapezoidal rule.",
        "full_name": "sklearn.metrics.auc",
        "href": "generated/sklearn.metrics.auc.html#sklearn.metrics.auc",
        "name": "auc",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute average precision (AP) from prediction scores.",
        "full_name": "sklearn.metrics.average_precision_score",
        "href": "generated/sklearn.metrics.average_precision_score.html#sklearn.metrics.average_precision_score",
        "name": "average_precision_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the balanced accuracy.",
        "full_name": "sklearn.metrics.balanced_accuracy_score",
        "href": "generated/sklearn.metrics.balanced_accuracy_score.html#sklearn.metrics.balanced_accuracy_score",
        "name": "balanced_accuracy_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the Brier score loss.",
        "full_name": "sklearn.metrics.brier_score_loss",
        "href": "generated/sklearn.metrics.brier_score_loss.html#sklearn.metrics.brier_score_loss",
        "name": "brier_score_loss",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Build a text report showing the main classification metrics.",
        "full_name": "sklearn.metrics.classification_report",
        "href": "generated/sklearn.metrics.classification_report.html#sklearn.metrics.classification_report",
        "name": "classification_report",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Cohen\u2019s kappa: a statistic that measures inter-annotator agreement.",
        "full_name": "sklearn.metrics.cohen_kappa_score",
        "href": "generated/sklearn.metrics.cohen_kappa_score.html#sklearn.metrics.cohen_kappa_score",
        "name": "cohen_kappa_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute confusion matrix to evaluate the accuracy of a classification.",
        "full_name": "sklearn.metrics.confusion_matrix",
        "href": "generated/sklearn.metrics.confusion_matrix.html#sklearn.metrics.confusion_matrix",
        "name": "confusion_matrix",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute Discounted Cumulative Gain.",
        "full_name": "sklearn.metrics.dcg_score",
        "href": "generated/sklearn.metrics.dcg_score.html#sklearn.metrics.dcg_score",
        "name": "dcg_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute error rates for different probability thresholds.",
        "full_name": "sklearn.metrics.det_curve",
        "href": "generated/sklearn.metrics.det_curve.html#sklearn.metrics.det_curve",
        "name": "det_curve",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the F1 score, also known as balanced F-score or F-measure.",
        "full_name": "sklearn.metrics.f1_score",
        "href": "generated/sklearn.metrics.f1_score.html#sklearn.metrics.f1_score",
        "name": "f1_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the F-beta score.",
        "full_name": "sklearn.metrics.fbeta_score",
        "href": "generated/sklearn.metrics.fbeta_score.html#sklearn.metrics.fbeta_score",
        "name": "fbeta_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the average Hamming loss.",
        "full_name": "sklearn.metrics.hamming_loss",
        "href": "generated/sklearn.metrics.hamming_loss.html#sklearn.metrics.hamming_loss",
        "name": "hamming_loss",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Average hinge loss (non-regularized).",
        "full_name": "sklearn.metrics.hinge_loss",
        "href": "generated/sklearn.metrics.hinge_loss.html#sklearn.metrics.hinge_loss",
        "name": "hinge_loss",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Jaccard similarity coefficient score.",
        "full_name": "sklearn.metrics.jaccard_score",
        "href": "generated/sklearn.metrics.jaccard_score.html#sklearn.metrics.jaccard_score",
        "name": "jaccard_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Log loss, aka logistic loss or cross-entropy loss.",
        "full_name": "sklearn.metrics.log_loss",
        "href": "generated/sklearn.metrics.log_loss.html#sklearn.metrics.log_loss",
        "name": "log_loss",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the Matthews correlation coefficient (MCC).",
        "full_name": "sklearn.metrics.matthews_corrcoef",
        "href": "generated/sklearn.metrics.matthews_corrcoef.html#sklearn.metrics.matthews_corrcoef",
        "name": "matthews_corrcoef",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute a confusion matrix for each class or sample.",
        "full_name": "sklearn.metrics.multilabel_confusion_matrix",
        "href": "generated/sklearn.metrics.multilabel_confusion_matrix.html#sklearn.metrics.multilabel_confusion_matrix",
        "name": "multilabel_confusion_matrix",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute Normalized Discounted Cumulative Gain.",
        "full_name": "sklearn.metrics.ndcg_score",
        "href": "generated/sklearn.metrics.ndcg_score.html#sklearn.metrics.ndcg_score",
        "name": "ndcg_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute precision-recall pairs for different probability thresholds.",
        "full_name": "sklearn.metrics.precision_recall_curve",
        "href": "generated/sklearn.metrics.precision_recall_curve.html#sklearn.metrics.precision_recall_curve",
        "name": "precision_recall_curve",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute precision, recall, F-measure and support for each class.",
        "full_name": "sklearn.metrics.precision_recall_fscore_support",
        "href": "generated/sklearn.metrics.precision_recall_fscore_support.html#sklearn.metrics.precision_recall_fscore_support",
        "name": "precision_recall_fscore_support",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the precision.",
        "full_name": "sklearn.metrics.precision_score",
        "href": "generated/sklearn.metrics.precision_score.html#sklearn.metrics.precision_score",
        "name": "precision_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the recall.",
        "full_name": "sklearn.metrics.recall_score",
        "href": "generated/sklearn.metrics.recall_score.html#sklearn.metrics.recall_score",
        "name": "recall_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute Area Under the Receiver Operating Characteristic Curve (ROC AUC) from prediction scores.",
        "full_name": "sklearn.metrics.roc_auc_score",
        "href": "generated/sklearn.metrics.roc_auc_score.html#sklearn.metrics.roc_auc_score",
        "name": "roc_auc_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute Receiver operating characteristic (ROC).",
        "full_name": "sklearn.metrics.roc_curve",
        "href": "generated/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve",
        "name": "roc_curve",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Top-k Accuracy classification score.",
        "full_name": "sklearn.metrics.top_k_accuracy_score",
        "href": "generated/sklearn.metrics.top_k_accuracy_score.html#sklearn.metrics.top_k_accuracy_score",
        "name": "top_k_accuracy_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Zero-one classification loss.",
        "full_name": "sklearn.metrics.zero_one_loss",
        "href": "generated/sklearn.metrics.zero_one_loss.html#sklearn.metrics.zero_one_loss",
        "name": "zero_one_loss",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Explained variance regression score function.",
        "full_name": "sklearn.metrics.explained_variance_score",
        "href": "generated/sklearn.metrics.explained_variance_score.html#sklearn.metrics.explained_variance_score",
        "name": "explained_variance_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "max_error metric calculates the maximum residual error.",
        "full_name": "sklearn.metrics.max_error",
        "href": "generated/sklearn.metrics.max_error.html#sklearn.metrics.max_error",
        "name": "max_error",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Mean absolute error regression loss.",
        "full_name": "sklearn.metrics.mean_absolute_error",
        "href": "generated/sklearn.metrics.mean_absolute_error.html#sklearn.metrics.mean_absolute_error",
        "name": "mean_absolute_error",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Mean squared error regression loss.",
        "full_name": "sklearn.metrics.mean_squared_error",
        "href": "generated/sklearn.metrics.mean_squared_error.html#sklearn.metrics.mean_squared_error",
        "name": "mean_squared_error",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Mean squared logarithmic error regression loss.",
        "full_name": "sklearn.metrics.mean_squared_log_error",
        "href": "generated/sklearn.metrics.mean_squared_log_error.html#sklearn.metrics.mean_squared_log_error",
        "name": "mean_squared_log_error",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Median absolute error regression loss.",
        "full_name": "sklearn.metrics.median_absolute_error",
        "href": "generated/sklearn.metrics.median_absolute_error.html#sklearn.metrics.median_absolute_error",
        "name": "median_absolute_error",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Mean absolute percentage error regression loss.",
        "full_name": "sklearn.metrics.mean_absolute_percentage_error",
        "href": "generated/sklearn.metrics.mean_absolute_percentage_error.html#sklearn.metrics.mean_absolute_percentage_error",
        "name": "mean_absolute_percentage_error",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "\\(R^2\\) (coefficient of determination) regression score function.",
        "full_name": "sklearn.metrics.r2_score",
        "href": "generated/sklearn.metrics.r2_score.html#sklearn.metrics.r2_score",
        "name": "r2_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Mean Poisson deviance regression loss.",
        "full_name": "sklearn.metrics.mean_poisson_deviance",
        "href": "generated/sklearn.metrics.mean_poisson_deviance.html#sklearn.metrics.mean_poisson_deviance",
        "name": "mean_poisson_deviance",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Mean Gamma deviance regression loss.",
        "full_name": "sklearn.metrics.mean_gamma_deviance",
        "href": "generated/sklearn.metrics.mean_gamma_deviance.html#sklearn.metrics.mean_gamma_deviance",
        "name": "mean_gamma_deviance",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Mean Tweedie deviance regression loss.",
        "full_name": "sklearn.metrics.mean_tweedie_deviance",
        "href": "generated/sklearn.metrics.mean_tweedie_deviance.html#sklearn.metrics.mean_tweedie_deviance",
        "name": "mean_tweedie_deviance",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "D^2 regression score function, percentage of Tweedie deviance explained.",
        "full_name": "sklearn.metrics.d2_tweedie_score",
        "href": "generated/sklearn.metrics.d2_tweedie_score.html#sklearn.metrics.d2_tweedie_score",
        "name": "d2_tweedie_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Pinball loss for quantile regression.",
        "full_name": "sklearn.metrics.mean_pinball_loss",
        "href": "generated/sklearn.metrics.mean_pinball_loss.html#sklearn.metrics.mean_pinball_loss",
        "name": "mean_pinball_loss",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Coverage error measure.",
        "full_name": "sklearn.metrics.coverage_error",
        "href": "generated/sklearn.metrics.coverage_error.html#sklearn.metrics.coverage_error",
        "name": "coverage_error",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute ranking-based average precision.",
        "full_name": "sklearn.metrics.label_ranking_average_precision_score",
        "href": "generated/sklearn.metrics.label_ranking_average_precision_score.html#sklearn.metrics.label_ranking_average_precision_score",
        "name": "label_ranking_average_precision_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute Ranking loss measure.",
        "full_name": "sklearn.metrics.label_ranking_loss",
        "href": "generated/sklearn.metrics.label_ranking_loss.html#sklearn.metrics.label_ranking_loss",
        "name": "label_ranking_loss",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Adjusted Mutual Information between two clusterings.",
        "full_name": "sklearn.metrics.adjusted_mutual_info_score",
        "href": "generated/sklearn.metrics.adjusted_mutual_info_score.html#sklearn.metrics.adjusted_mutual_info_score",
        "name": "adjusted_mutual_info_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Rand index adjusted for chance.",
        "full_name": "sklearn.metrics.adjusted_rand_score",
        "href": "generated/sklearn.metrics.adjusted_rand_score.html#sklearn.metrics.adjusted_rand_score",
        "name": "adjusted_rand_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the Calinski and Harabasz score.",
        "full_name": "sklearn.metrics.calinski_harabasz_score",
        "href": "generated/sklearn.metrics.calinski_harabasz_score.html#sklearn.metrics.calinski_harabasz_score",
        "name": "calinski_harabasz_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Computes the Davies-Bouldin score.",
        "full_name": "sklearn.metrics.davies_bouldin_score",
        "href": "generated/sklearn.metrics.davies_bouldin_score.html#sklearn.metrics.davies_bouldin_score",
        "name": "davies_bouldin_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Completeness metric of a cluster labeling given a ground truth.",
        "full_name": "sklearn.metrics.completeness_score",
        "href": "generated/sklearn.metrics.completeness_score.html#sklearn.metrics.completeness_score",
        "name": "completeness_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Build a contingency matrix describing the relationship between labels.",
        "full_name": "sklearn.metrics.cluster.contingency_matrix",
        "href": "generated/sklearn.metrics.cluster.contingency_matrix.html#sklearn.metrics.cluster.contingency_matrix",
        "name": "contingency_matrix",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Pair confusion matrix arising from two clusterings.",
        "full_name": "sklearn.metrics.cluster.pair_confusion_matrix",
        "href": "generated/sklearn.metrics.cluster.pair_confusion_matrix.html#sklearn.metrics.cluster.pair_confusion_matrix",
        "name": "pair_confusion_matrix",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Measure the similarity of two clusterings of a set of points.",
        "full_name": "sklearn.metrics.fowlkes_mallows_score",
        "href": "generated/sklearn.metrics.fowlkes_mallows_score.html#sklearn.metrics.fowlkes_mallows_score",
        "name": "fowlkes_mallows_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the homogeneity and completeness and V-Measure scores at once.",
        "full_name": "sklearn.metrics.homogeneity_completeness_v_measure",
        "href": "generated/sklearn.metrics.homogeneity_completeness_v_measure.html#sklearn.metrics.homogeneity_completeness_v_measure",
        "name": "homogeneity_completeness_v_measure",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Homogeneity metric of a cluster labeling given a ground truth.",
        "full_name": "sklearn.metrics.homogeneity_score",
        "href": "generated/sklearn.metrics.homogeneity_score.html#sklearn.metrics.homogeneity_score",
        "name": "homogeneity_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Mutual Information between two clusterings.",
        "full_name": "sklearn.metrics.mutual_info_score",
        "href": "generated/sklearn.metrics.mutual_info_score.html#sklearn.metrics.mutual_info_score",
        "name": "mutual_info_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Normalized Mutual Information between two clusterings.",
        "full_name": "sklearn.metrics.normalized_mutual_info_score",
        "href": "generated/sklearn.metrics.normalized_mutual_info_score.html#sklearn.metrics.normalized_mutual_info_score",
        "name": "normalized_mutual_info_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Rand index.",
        "full_name": "sklearn.metrics.rand_score",
        "href": "generated/sklearn.metrics.rand_score.html#sklearn.metrics.rand_score",
        "name": "rand_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the mean Silhouette Coefficient of all samples.",
        "full_name": "sklearn.metrics.silhouette_score",
        "href": "generated/sklearn.metrics.silhouette_score.html#sklearn.metrics.silhouette_score",
        "name": "silhouette_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the Silhouette Coefficient for each sample.",
        "full_name": "sklearn.metrics.silhouette_samples",
        "href": "generated/sklearn.metrics.silhouette_samples.html#sklearn.metrics.silhouette_samples",
        "name": "silhouette_samples",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "V-measure cluster labeling given a ground truth.",
        "full_name": "sklearn.metrics.v_measure_score",
        "href": "generated/sklearn.metrics.v_measure_score.html#sklearn.metrics.v_measure_score",
        "name": "v_measure_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "The similarity of two sets of biclusters.",
        "full_name": "sklearn.metrics.consensus_score",
        "href": "generated/sklearn.metrics.consensus_score.html#sklearn.metrics.consensus_score",
        "name": "consensus_score",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Computes the additive chi-squared kernel between observations in X and Y.",
        "full_name": "sklearn.metrics.pairwise.additive_chi2_kernel",
        "href": "generated/sklearn.metrics.pairwise.additive_chi2_kernel.html#sklearn.metrics.pairwise.additive_chi2_kernel",
        "name": "additive_chi2_kernel",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Computes the exponential chi-squared kernel X and Y.",
        "full_name": "sklearn.metrics.pairwise.chi2_kernel",
        "href": "generated/sklearn.metrics.pairwise.chi2_kernel.html#sklearn.metrics.pairwise.chi2_kernel",
        "name": "chi2_kernel",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute cosine similarity between samples in X and Y.",
        "full_name": "sklearn.metrics.pairwise.cosine_similarity",
        "href": "generated/sklearn.metrics.pairwise.cosine_similarity.html#sklearn.metrics.pairwise.cosine_similarity",
        "name": "cosine_similarity",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute cosine distance between samples in X and Y.",
        "full_name": "sklearn.metrics.pairwise.cosine_distances",
        "href": "generated/sklearn.metrics.pairwise.cosine_distances.html#sklearn.metrics.pairwise.cosine_distances",
        "name": "cosine_distances",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Valid metrics for pairwise_distances.",
        "full_name": "sklearn.metrics.pairwise.distance_metrics",
        "href": "generated/sklearn.metrics.pairwise.distance_metrics.html#sklearn.metrics.pairwise.distance_metrics",
        "name": "distance_metrics",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Considering the rows of X (and Y=X) as vectors, compute the distance matrix between each pair of vectors.",
        "full_name": "sklearn.metrics.pairwise.euclidean_distances",
        "href": "generated/sklearn.metrics.pairwise.euclidean_distances.html#sklearn.metrics.pairwise.euclidean_distances",
        "name": "euclidean_distances",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the Haversine distance between samples in X and Y.",
        "full_name": "sklearn.metrics.pairwise.haversine_distances",
        "href": "generated/sklearn.metrics.pairwise.haversine_distances.html#sklearn.metrics.pairwise.haversine_distances",
        "name": "haversine_distances",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Valid metrics for pairwise_kernels.",
        "full_name": "sklearn.metrics.pairwise.kernel_metrics",
        "href": "generated/sklearn.metrics.pairwise.kernel_metrics.html#sklearn.metrics.pairwise.kernel_metrics",
        "name": "kernel_metrics",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the laplacian kernel between X and Y.",
        "full_name": "sklearn.metrics.pairwise.laplacian_kernel",
        "href": "generated/sklearn.metrics.pairwise.laplacian_kernel.html#sklearn.metrics.pairwise.laplacian_kernel",
        "name": "laplacian_kernel",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the linear kernel between X and Y.",
        "full_name": "sklearn.metrics.pairwise.linear_kernel",
        "href": "generated/sklearn.metrics.pairwise.linear_kernel.html#sklearn.metrics.pairwise.linear_kernel",
        "name": "linear_kernel",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the L1 distances between the vectors in X and Y.",
        "full_name": "sklearn.metrics.pairwise.manhattan_distances",
        "href": "generated/sklearn.metrics.pairwise.manhattan_distances.html#sklearn.metrics.pairwise.manhattan_distances",
        "name": "manhattan_distances",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Calculate the euclidean distances in the presence of missing values.",
        "full_name": "sklearn.metrics.pairwise.nan_euclidean_distances",
        "href": "generated/sklearn.metrics.pairwise.nan_euclidean_distances.html#sklearn.metrics.pairwise.nan_euclidean_distances",
        "name": "nan_euclidean_distances",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the kernel between arrays X and optional array Y.",
        "full_name": "sklearn.metrics.pairwise.pairwise_kernels",
        "href": "generated/sklearn.metrics.pairwise.pairwise_kernels.html#sklearn.metrics.pairwise.pairwise_kernels",
        "name": "pairwise_kernels",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the polynomial kernel between X and Y.",
        "full_name": "sklearn.metrics.pairwise.polynomial_kernel",
        "href": "generated/sklearn.metrics.pairwise.polynomial_kernel.html#sklearn.metrics.pairwise.polynomial_kernel",
        "name": "polynomial_kernel",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the rbf (gaussian) kernel between X and Y.",
        "full_name": "sklearn.metrics.pairwise.rbf_kernel",
        "href": "generated/sklearn.metrics.pairwise.rbf_kernel.html#sklearn.metrics.pairwise.rbf_kernel",
        "name": "rbf_kernel",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the sigmoid kernel between X and Y.",
        "full_name": "sklearn.metrics.pairwise.sigmoid_kernel",
        "href": "generated/sklearn.metrics.pairwise.sigmoid_kernel.html#sklearn.metrics.pairwise.sigmoid_kernel",
        "name": "sigmoid_kernel",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Computes the paired euclidean distances between X and Y.",
        "full_name": "sklearn.metrics.pairwise.paired_euclidean_distances",
        "href": "generated/sklearn.metrics.pairwise.paired_euclidean_distances.html#sklearn.metrics.pairwise.paired_euclidean_distances",
        "name": "paired_euclidean_distances",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the L1 distances between the vectors in X and Y.",
        "full_name": "sklearn.metrics.pairwise.paired_manhattan_distances",
        "href": "generated/sklearn.metrics.pairwise.paired_manhattan_distances.html#sklearn.metrics.pairwise.paired_manhattan_distances",
        "name": "paired_manhattan_distances",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Computes the paired cosine distances between X and Y.",
        "full_name": "sklearn.metrics.pairwise.paired_cosine_distances",
        "href": "generated/sklearn.metrics.pairwise.paired_cosine_distances.html#sklearn.metrics.pairwise.paired_cosine_distances",
        "name": "paired_cosine_distances",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Computes the paired distances between X and Y.",
        "full_name": "sklearn.metrics.pairwise.paired_distances",
        "href": "generated/sklearn.metrics.pairwise.paired_distances.html#sklearn.metrics.pairwise.paired_distances",
        "name": "paired_distances",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the distance matrix from a vector array X and optional Y.",
        "full_name": "sklearn.metrics.pairwise_distances",
        "href": "generated/sklearn.metrics.pairwise_distances.html#sklearn.metrics.pairwise_distances",
        "name": "pairwise_distances",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute minimum distances between one point and a set of points.",
        "full_name": "sklearn.metrics.pairwise_distances_argmin",
        "href": "generated/sklearn.metrics.pairwise_distances_argmin.html#sklearn.metrics.pairwise_distances_argmin",
        "name": "pairwise_distances_argmin",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute minimum distances between one point and a set of points.",
        "full_name": "sklearn.metrics.pairwise_distances_argmin_min",
        "href": "generated/sklearn.metrics.pairwise_distances_argmin_min.html#sklearn.metrics.pairwise_distances_argmin_min",
        "name": "pairwise_distances_argmin_min",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate a distance matrix chunk by chunk with optional reduction.",
        "full_name": "sklearn.metrics.pairwise_distances_chunked",
        "href": "generated/sklearn.metrics.pairwise_distances_chunked.html#sklearn.metrics.pairwise_distances_chunked",
        "name": "pairwise_distances_chunked",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "DEPRECATED: Function plot_confusion_matrix is deprecated in 1.0 and will be removed in 1.2.",
        "full_name": "sklearn.metrics.plot_confusion_matrix",
        "href": "generated/sklearn.metrics.plot_confusion_matrix.html#sklearn.metrics.plot_confusion_matrix",
        "name": "plot_confusion_matrix",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "DEPRECATED: Function plot_det_curve is deprecated in 1.0 and will be removed in 1.2.",
        "full_name": "sklearn.metrics.plot_det_curve",
        "href": "generated/sklearn.metrics.plot_det_curve.html#sklearn.metrics.plot_det_curve",
        "name": "plot_det_curve",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "DEPRECATED: Function plot_precision_recall_curve is deprecated in 1.0 and will be removed in 1.2.",
        "full_name": "sklearn.metrics.plot_precision_recall_curve",
        "href": "generated/sklearn.metrics.plot_precision_recall_curve.html#sklearn.metrics.plot_precision_recall_curve",
        "name": "plot_precision_recall_curve",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "DEPRECATED: Function plot_roc_curve is deprecated in 1.0 and will be removed in 1.2.",
        "full_name": "sklearn.metrics.plot_roc_curve",
        "href": "generated/sklearn.metrics.plot_roc_curve.html#sklearn.metrics.plot_roc_curve",
        "name": "plot_roc_curve",
        "package_name": "sklearn-metrics-metrics",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Confusion Matrix visualization.",
        "full_name": "sklearn.metrics.ConfusionMatrixDisplay",
        "href": "generated/sklearn.metrics.ConfusionMatrixDisplay.html#sklearn.metrics.ConfusionMatrixDisplay",
        "name": "ConfusionMatrixDisplay",
        "package_name": "sklearn-metrics-metrics",
        "params": [
            "confusion_matrix",
            "display_labels"
        ],
        "type": "CLASS"
    },
    {
        "description": "DET curve visualization.",
        "full_name": "sklearn.metrics.DetCurveDisplay",
        "href": "generated/sklearn.metrics.DetCurveDisplay.html#sklearn.metrics.DetCurveDisplay",
        "name": "DetCurveDisplay",
        "package_name": "sklearn-metrics-metrics",
        "params": [
            "fpr",
            "fnr",
            "estimator_name",
            "pos_label"
        ],
        "type": "CLASS"
    },
    {
        "description": "Precision Recall visualization.",
        "full_name": "sklearn.metrics.PrecisionRecallDisplay",
        "href": "generated/sklearn.metrics.PrecisionRecallDisplay.html#sklearn.metrics.PrecisionRecallDisplay",
        "name": "PrecisionRecallDisplay",
        "package_name": "sklearn-metrics-metrics",
        "params": [
            "precision",
            "recall",
            "average_precision",
            "estimator_name",
            "pos_label"
        ],
        "type": "CLASS"
    },
    {
        "description": "ROC Curve visualization.",
        "full_name": "sklearn.metrics.RocCurveDisplay",
        "href": "generated/sklearn.metrics.RocCurveDisplay.html#sklearn.metrics.RocCurveDisplay",
        "name": "RocCurveDisplay",
        "package_name": "sklearn-metrics-metrics",
        "params": [
            "fpr",
            "tpr",
            "roc_auc",
            "estimator_name",
            "pos_label"
        ],
        "type": "CLASS"
    },
    {
        "description": "Calibration curve (also known as reliability diagram) visualization.",
        "full_name": "sklearn.calibration.CalibrationDisplay",
        "href": "generated/sklearn.calibration.CalibrationDisplay.html#sklearn.calibration.CalibrationDisplay",
        "name": "CalibrationDisplay",
        "package_name": "sklearn-metrics-metrics",
        "params": [
            "prob_true",
            "prob_pred",
            "y_prob",
            "estimator_name"
        ],
        "type": "CLASS"
    },
    {
        "description": "Variational Bayesian estimation of a Gaussian mixture.",
        "full_name": "sklearn.mixture.BayesianGaussianMixture",
        "href": "generated/sklearn.mixture.BayesianGaussianMixture.html#sklearn.mixture.BayesianGaussianMixture",
        "name": "BayesianGaussianMixture",
        "package_name": "module-sklearn.mixture",
        "params": [
            "n_components",
            "covariance_type",
            "tol",
            "reg_covar",
            "max_iter",
            "n_init",
            "init_params",
            "weight_concentration_prior_type",
            "weight_concentration_prior",
            "mean_precision_prior",
            "mean_prior",
            "degrees_of_freedom_prior",
            "covariance_prior",
            "random_state",
            "warm_start",
            "verbose",
            "verbose_interval"
        ],
        "type": "CLASS"
    },
    {
        "description": "Gaussian Mixture.",
        "full_name": "sklearn.mixture.GaussianMixture",
        "href": "generated/sklearn.mixture.GaussianMixture.html#sklearn.mixture.GaussianMixture",
        "name": "GaussianMixture",
        "package_name": "module-sklearn.mixture",
        "params": [
            "n_components",
            "covariance_type",
            "tol",
            "reg_covar",
            "max_iter",
            "n_init",
            "init_params",
            "weights_init",
            "means_init",
            "precisions_init",
            "random_state",
            "warm_start",
            "verbose",
            "verbose_interval"
        ],
        "type": "CLASS"
    },
    {
        "description": "K-fold iterator variant with non-overlapping groups.",
        "full_name": "sklearn.model_selection.GroupKFold",
        "href": "generated/sklearn.model_selection.GroupKFold.html#sklearn.model_selection.GroupKFold",
        "name": "GroupKFold",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "n_splits"
        ],
        "type": "CLASS"
    },
    {
        "description": "Shuffle-Group(s)-Out cross-validation iterator",
        "full_name": "sklearn.model_selection.GroupShuffleSplit",
        "href": "generated/sklearn.model_selection.GroupShuffleSplit.html#sklearn.model_selection.GroupShuffleSplit",
        "name": "GroupShuffleSplit",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "n_splits",
            "test_size",
            "train_size",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "K-Folds cross-validator",
        "full_name": "sklearn.model_selection.KFold",
        "href": "generated/sklearn.model_selection.KFold.html#sklearn.model_selection.KFold",
        "name": "KFold",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "n_splits",
            "shuffle",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Leave One Group Out cross-validator",
        "full_name": "sklearn.model_selection.LeaveOneGroupOut",
        "href": "generated/sklearn.model_selection.LeaveOneGroupOut.html#sklearn.model_selection.LeaveOneGroupOut",
        "name": "LeaveOneGroupOut",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "X",
            "y",
            "groups"
        ],
        "type": "CLASS"
    },
    {
        "description": "Leave P Group(s) Out cross-validator",
        "full_name": "sklearn.model_selection.LeavePGroupsOut",
        "href": "generated/sklearn.model_selection.LeavePGroupsOut.html#sklearn.model_selection.LeavePGroupsOut",
        "name": "LeavePGroupsOut",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "n_groups"
        ],
        "type": "CLASS"
    },
    {
        "description": "Leave-One-Out cross-validator",
        "full_name": "sklearn.model_selection.LeaveOneOut",
        "href": "generated/sklearn.model_selection.LeaveOneOut.html#sklearn.model_selection.LeaveOneOut",
        "name": "LeaveOneOut",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "X",
            "y",
            "groups"
        ],
        "type": "CLASS"
    },
    {
        "description": "Leave-P-Out cross-validator",
        "full_name": "sklearn.model_selection.LeavePOut",
        "href": "generated/sklearn.model_selection.LeavePOut.html#sklearn.model_selection.LeavePOut",
        "name": "LeavePOut",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "p"
        ],
        "type": "CLASS"
    },
    {
        "description": "Predefined split cross-validator",
        "full_name": "sklearn.model_selection.PredefinedSplit",
        "href": "generated/sklearn.model_selection.PredefinedSplit.html#sklearn.model_selection.PredefinedSplit",
        "name": "PredefinedSplit",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "test_fold"
        ],
        "type": "CLASS"
    },
    {
        "description": "Repeated K-Fold cross validator.",
        "full_name": "sklearn.model_selection.RepeatedKFold",
        "href": "generated/sklearn.model_selection.RepeatedKFold.html#sklearn.model_selection.RepeatedKFold",
        "name": "RepeatedKFold",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "n_splits",
            "n_repeats",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Repeated Stratified K-Fold cross validator.",
        "full_name": "sklearn.model_selection.RepeatedStratifiedKFold",
        "href": "generated/sklearn.model_selection.RepeatedStratifiedKFold.html#sklearn.model_selection.RepeatedStratifiedKFold",
        "name": "RepeatedStratifiedKFold",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "n_splits",
            "n_repeats",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Random permutation cross-validator",
        "full_name": "sklearn.model_selection.ShuffleSplit",
        "href": "generated/sklearn.model_selection.ShuffleSplit.html#sklearn.model_selection.ShuffleSplit",
        "name": "ShuffleSplit",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "n_splits",
            "test_size",
            "train_size",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Stratified K-Folds cross-validator.",
        "full_name": "sklearn.model_selection.StratifiedKFold",
        "href": "generated/sklearn.model_selection.StratifiedKFold.html#sklearn.model_selection.StratifiedKFold",
        "name": "StratifiedKFold",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "n_splits",
            "shuffle",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Stratified ShuffleSplit cross-validator",
        "full_name": "sklearn.model_selection.StratifiedShuffleSplit",
        "href": "generated/sklearn.model_selection.StratifiedShuffleSplit.html#sklearn.model_selection.StratifiedShuffleSplit",
        "name": "StratifiedShuffleSplit",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "n_splits",
            "test_size",
            "train_size",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Stratified K-Folds iterator variant with non-overlapping groups.",
        "full_name": "sklearn.model_selection.StratifiedGroupKFold",
        "href": "generated/sklearn.model_selection.StratifiedGroupKFold.html#sklearn.model_selection.StratifiedGroupKFold",
        "name": "StratifiedGroupKFold",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "n_splits",
            "shuffle",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Time Series cross-validator",
        "full_name": "sklearn.model_selection.TimeSeriesSplit",
        "href": "generated/sklearn.model_selection.TimeSeriesSplit.html#sklearn.model_selection.TimeSeriesSplit",
        "name": "TimeSeriesSplit",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "n_splits",
            "max_train_size",
            "test_size",
            "gap"
        ],
        "type": "CLASS"
    },
    {
        "description": "Input checker utility for building a cross-validator",
        "full_name": "sklearn.model_selection.check_cv",
        "href": "generated/sklearn.model_selection.check_cv.html#sklearn.model_selection.check_cv",
        "name": "check_cv",
        "package_name": "module-sklearn.model_selection",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Split arrays or matrices into random train and test subsets",
        "full_name": "sklearn.model_selection.train_test_split",
        "href": "generated/sklearn.model_selection.train_test_split.html#sklearn.model_selection.train_test_split",
        "name": "train_test_split",
        "package_name": "module-sklearn.model_selection",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Exhaustive search over specified parameter values for an estimator.",
        "full_name": "sklearn.model_selection.GridSearchCV",
        "href": "generated/sklearn.model_selection.GridSearchCV.html#sklearn.model_selection.GridSearchCV",
        "name": "GridSearchCV",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "estimator",
            "param_grid",
            "scoring",
            "n_jobs",
            "refit",
            "cv",
            "verbose",
            "pre_dispatch",
            "error_score",
            "return_train_score"
        ],
        "type": "CLASS"
    },
    {
        "description": "Search over specified parameter values with successive halving.",
        "full_name": "sklearn.model_selection.HalvingGridSearchCV",
        "href": "generated/sklearn.model_selection.HalvingGridSearchCV.html#sklearn.model_selection.HalvingGridSearchCV",
        "name": "HalvingGridSearchCV",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "estimator",
            "param_grid",
            "factor",
            "resource",
            "max_resources",
            "min_resources",
            "aggressive_elimination",
            "cv",
            "scoring",
            "refit",
            "error_score",
            "return_train_score",
            "random_state",
            "n_jobs",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "Grid of parameters with a discrete number of values for each.",
        "full_name": "sklearn.model_selection.ParameterGrid",
        "href": "generated/sklearn.model_selection.ParameterGrid.html#sklearn.model_selection.ParameterGrid",
        "name": "ParameterGrid",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "param_grid"
        ],
        "type": "CLASS"
    },
    {
        "description": "Generator on parameters sampled from given distributions.",
        "full_name": "sklearn.model_selection.ParameterSampler",
        "href": "generated/sklearn.model_selection.ParameterSampler.html#sklearn.model_selection.ParameterSampler",
        "name": "ParameterSampler",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "param_distributions",
            "n_iter",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Randomized search on hyper parameters.",
        "full_name": "sklearn.model_selection.RandomizedSearchCV",
        "href": "generated/sklearn.model_selection.RandomizedSearchCV.html#sklearn.model_selection.RandomizedSearchCV",
        "name": "RandomizedSearchCV",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "estimator",
            "param_distributions",
            "n_iter",
            "scoring",
            "n_jobs",
            "refit",
            "cv",
            "verbose",
            "pre_dispatch",
            "random_state",
            "error_score",
            "return_train_score"
        ],
        "type": "CLASS"
    },
    {
        "description": "Randomized search on hyper parameters.",
        "full_name": "sklearn.model_selection.HalvingRandomSearchCV",
        "href": "generated/sklearn.model_selection.HalvingRandomSearchCV.html#sklearn.model_selection.HalvingRandomSearchCV",
        "name": "HalvingRandomSearchCV",
        "package_name": "module-sklearn.model_selection",
        "params": [
            "estimator",
            "param_distributions",
            "n_candidates",
            "factor",
            "resource",
            "max_resources",
            "min_resources",
            "aggressive_elimination",
            "cv",
            "scoring",
            "refit",
            "error_score",
            "return_train_score",
            "random_state",
            "n_jobs",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "Evaluate metric(s) by cross-validation and also record fit/score times.",
        "full_name": "sklearn.model_selection.cross_validate",
        "href": "generated/sklearn.model_selection.cross_validate.html#sklearn.model_selection.cross_validate",
        "name": "cross_validate",
        "package_name": "module-sklearn.model_selection",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generate cross-validated estimates for each input data point",
        "full_name": "sklearn.model_selection.cross_val_predict",
        "href": "generated/sklearn.model_selection.cross_val_predict.html#sklearn.model_selection.cross_val_predict",
        "name": "cross_val_predict",
        "package_name": "module-sklearn.model_selection",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Evaluate a score by cross-validation",
        "full_name": "sklearn.model_selection.cross_val_score",
        "href": "generated/sklearn.model_selection.cross_val_score.html#sklearn.model_selection.cross_val_score",
        "name": "cross_val_score",
        "package_name": "module-sklearn.model_selection",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Learning curve.",
        "full_name": "sklearn.model_selection.learning_curve",
        "href": "generated/sklearn.model_selection.learning_curve.html#sklearn.model_selection.learning_curve",
        "name": "learning_curve",
        "package_name": "module-sklearn.model_selection",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Evaluate the significance of a cross-validated score with permutations",
        "full_name": "sklearn.model_selection.permutation_test_score",
        "href": "generated/sklearn.model_selection.permutation_test_score.html#sklearn.model_selection.permutation_test_score",
        "name": "permutation_test_score",
        "package_name": "module-sklearn.model_selection",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Validation curve.",
        "full_name": "sklearn.model_selection.validation_curve",
        "href": "generated/sklearn.model_selection.validation_curve.html#sklearn.model_selection.validation_curve",
        "name": "validation_curve",
        "package_name": "module-sklearn.model_selection",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "One-vs-the-rest (OvR) multiclass strategy.",
        "full_name": "sklearn.multiclass.OneVsRestClassifier",
        "href": "generated/sklearn.multiclass.OneVsRestClassifier.html#sklearn.multiclass.OneVsRestClassifier",
        "name": "OneVsRestClassifier",
        "package_name": "module-sklearn.multiclass",
        "params": [
            "estimator",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "One-vs-one multiclass strategy.",
        "full_name": "sklearn.multiclass.OneVsOneClassifier",
        "href": "generated/sklearn.multiclass.OneVsOneClassifier.html#sklearn.multiclass.OneVsOneClassifier",
        "name": "OneVsOneClassifier",
        "package_name": "module-sklearn.multiclass",
        "params": [
            "estimator",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "(Error-Correcting) Output-Code multiclass strategy.",
        "full_name": "sklearn.multiclass.OutputCodeClassifier",
        "href": "generated/sklearn.multiclass.OutputCodeClassifier.html#sklearn.multiclass.OutputCodeClassifier",
        "name": "OutputCodeClassifier",
        "package_name": "module-sklearn.multiclass",
        "params": [
            "estimator",
            "code_size",
            "random_state",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "A multi-label model that arranges binary classifiers into a chain.",
        "full_name": "sklearn.multioutput.ClassifierChain",
        "href": "generated/sklearn.multioutput.ClassifierChain.html#sklearn.multioutput.ClassifierChain",
        "name": "ClassifierChain",
        "package_name": "module-sklearn.multioutput",
        "params": [
            "base_estimator",
            "order",
            "cv",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Multi target regression.",
        "full_name": "sklearn.multioutput.MultiOutputRegressor",
        "href": "generated/sklearn.multioutput.MultiOutputRegressor.html#sklearn.multioutput.MultiOutputRegressor",
        "name": "MultiOutputRegressor",
        "package_name": "module-sklearn.multioutput",
        "params": [
            "estimator",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "Multi target classification.",
        "full_name": "sklearn.multioutput.MultiOutputClassifier",
        "href": "generated/sklearn.multioutput.MultiOutputClassifier.html#sklearn.multioutput.MultiOutputClassifier",
        "name": "MultiOutputClassifier",
        "package_name": "module-sklearn.multioutput",
        "params": [
            "estimator",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "A multi-label model that arranges regressions into a chain.",
        "full_name": "sklearn.multioutput.RegressorChain",
        "href": "generated/sklearn.multioutput.RegressorChain.html#sklearn.multioutput.RegressorChain",
        "name": "RegressorChain",
        "package_name": "module-sklearn.multioutput",
        "params": [
            "base_estimator",
            "order",
            "cv",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Naive Bayes classifier for multivariate Bernoulli models.",
        "full_name": "sklearn.naive_bayes.BernoulliNB",
        "href": "generated/sklearn.naive_bayes.BernoulliNB.html#sklearn.naive_bayes.BernoulliNB",
        "name": "BernoulliNB",
        "package_name": "module-sklearn.naive_bayes",
        "params": [
            "alpha",
            "binarize",
            "fit_prior",
            "class_prior"
        ],
        "type": "CLASS"
    },
    {
        "description": "Naive Bayes classifier for categorical features.",
        "full_name": "sklearn.naive_bayes.CategoricalNB",
        "href": "generated/sklearn.naive_bayes.CategoricalNB.html#sklearn.naive_bayes.CategoricalNB",
        "name": "CategoricalNB",
        "package_name": "module-sklearn.naive_bayes",
        "params": [
            "alpha",
            "fit_prior",
            "class_prior",
            "min_categories"
        ],
        "type": "CLASS"
    },
    {
        "description": "The Complement Naive Bayes classifier described in Rennie et al. (2003).",
        "full_name": "sklearn.naive_bayes.ComplementNB",
        "href": "generated/sklearn.naive_bayes.ComplementNB.html#sklearn.naive_bayes.ComplementNB",
        "name": "ComplementNB",
        "package_name": "module-sklearn.naive_bayes",
        "params": [
            "alpha",
            "fit_prior",
            "class_prior",
            "norm"
        ],
        "type": "CLASS"
    },
    {
        "description": "Gaussian Naive Bayes (GaussianNB).",
        "full_name": "sklearn.naive_bayes.GaussianNB",
        "href": "generated/sklearn.naive_bayes.GaussianNB.html#sklearn.naive_bayes.GaussianNB",
        "name": "GaussianNB",
        "package_name": "module-sklearn.naive_bayes",
        "params": [
            "priors",
            "var_smoothing"
        ],
        "type": "CLASS"
    },
    {
        "description": "Naive Bayes classifier for multinomial models.",
        "full_name": "sklearn.naive_bayes.MultinomialNB",
        "href": "generated/sklearn.naive_bayes.MultinomialNB.html#sklearn.naive_bayes.MultinomialNB",
        "name": "MultinomialNB",
        "package_name": "module-sklearn.naive_bayes",
        "params": [
            "alpha",
            "fit_prior",
            "class_prior"
        ],
        "type": "CLASS"
    },
    {
        "description": "BallTree for fast generalized N-point problems",
        "full_name": "sklearn.neighbors.BallTree",
        "href": "generated/sklearn.neighbors.BallTree.html#sklearn.neighbors.BallTree",
        "name": "BallTree",
        "package_name": "module-sklearn.neighbors",
        "params": [
            "X",
            "leaf_size",
            "metric",
            "Additional keywords are passed to the distance metric class.",
            "Note: Callable functions in the metric parameter are NOT supported for KDTree",
            "and Ball Tree. Function call overhead will result in very poor performance."
        ],
        "type": "CLASS"
    },
    {
        "description": "DistanceMetric class",
        "full_name": "sklearn.neighbors.DistanceMetric",
        "href": "generated/sklearn.neighbors.DistanceMetric.html#sklearn.neighbors.DistanceMetric",
        "name": "DistanceMetric",
        "package_name": "module-sklearn.neighbors",
        "params": [
            "dist"
        ],
        "type": "CLASS"
    },
    {
        "description": "KDTree for fast generalized N-point problems",
        "full_name": "sklearn.neighbors.KDTree",
        "href": "generated/sklearn.neighbors.KDTree.html#sklearn.neighbors.KDTree",
        "name": "KDTree",
        "package_name": "module-sklearn.neighbors",
        "params": [
            "X",
            "leaf_size",
            "metric",
            "Additional keywords are passed to the distance metric class.",
            "Note: Callable functions in the metric parameter are NOT supported for KDTree",
            "and Ball Tree. Function call overhead will result in very poor performance."
        ],
        "type": "CLASS"
    },
    {
        "description": "Kernel Density Estimation.",
        "full_name": "sklearn.neighbors.KernelDensity",
        "href": "generated/sklearn.neighbors.KernelDensity.html#sklearn.neighbors.KernelDensity",
        "name": "KernelDensity",
        "package_name": "module-sklearn.neighbors",
        "params": [
            "bandwidth",
            "algorithm",
            "kernel",
            "metric",
            "atol",
            "rtol",
            "breadth_first",
            "leaf_size",
            "metric_params"
        ],
        "type": "CLASS"
    },
    {
        "description": "Classifier implementing the k-nearest neighbors vote.",
        "full_name": "sklearn.neighbors.KNeighborsClassifier",
        "href": "generated/sklearn.neighbors.KNeighborsClassifier.html#sklearn.neighbors.KNeighborsClassifier",
        "name": "KNeighborsClassifier",
        "package_name": "module-sklearn.neighbors",
        "params": [
            "n_neighbors",
            "weights",
            "algorithm",
            "leaf_size",
            "p",
            "metric",
            "metric_params",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "Regression based on k-nearest neighbors.",
        "full_name": "sklearn.neighbors.KNeighborsRegressor",
        "href": "generated/sklearn.neighbors.KNeighborsRegressor.html#sklearn.neighbors.KNeighborsRegressor",
        "name": "KNeighborsRegressor",
        "package_name": "module-sklearn.neighbors",
        "params": [
            "n_neighbors",
            "weights",
            "algorithm",
            "leaf_size",
            "p",
            "metric",
            "metric_params",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "Transform X into a (weighted) graph of k nearest neighbors.",
        "full_name": "sklearn.neighbors.KNeighborsTransformer",
        "href": "generated/sklearn.neighbors.KNeighborsTransformer.html#sklearn.neighbors.KNeighborsTransformer",
        "name": "KNeighborsTransformer",
        "package_name": "module-sklearn.neighbors",
        "params": [
            "mode",
            "n_neighbors",
            "algorithm",
            "leaf_size",
            "metric",
            "p",
            "metric_params",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "Unsupervised Outlier Detection using the Local Outlier Factor (LOF).",
        "full_name": "sklearn.neighbors.LocalOutlierFactor",
        "href": "generated/sklearn.neighbors.LocalOutlierFactor.html#sklearn.neighbors.LocalOutlierFactor",
        "name": "LocalOutlierFactor",
        "package_name": "module-sklearn.neighbors",
        "params": [
            "n_neighbors",
            "algorithm",
            "leaf_size",
            "metric",
            "p",
            "metric_params",
            "contamination",
            "novelty",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "Classifier implementing a vote among neighbors within a given radius.",
        "full_name": "sklearn.neighbors.RadiusNeighborsClassifier",
        "href": "generated/sklearn.neighbors.RadiusNeighborsClassifier.html#sklearn.neighbors.RadiusNeighborsClassifier",
        "name": "RadiusNeighborsClassifier",
        "package_name": "module-sklearn.neighbors",
        "params": [
            "radius",
            "weights",
            "algorithm",
            "leaf_size",
            "p",
            "metric",
            "outlier_label",
            "metric_params",
            "n_jobs",
            "**kwargs"
        ],
        "type": "CLASS"
    },
    {
        "description": "Regression based on neighbors within a fixed radius.",
        "full_name": "sklearn.neighbors.RadiusNeighborsRegressor",
        "href": "generated/sklearn.neighbors.RadiusNeighborsRegressor.html#sklearn.neighbors.RadiusNeighborsRegressor",
        "name": "RadiusNeighborsRegressor",
        "package_name": "module-sklearn.neighbors",
        "params": [
            "radius",
            "weights",
            "algorithm",
            "leaf_size",
            "p",
            "metric",
            "metric_params",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "Transform X into a (weighted) graph of neighbors nearer than a radius.",
        "full_name": "sklearn.neighbors.RadiusNeighborsTransformer",
        "href": "generated/sklearn.neighbors.RadiusNeighborsTransformer.html#sklearn.neighbors.RadiusNeighborsTransformer",
        "name": "RadiusNeighborsTransformer",
        "package_name": "module-sklearn.neighbors",
        "params": [
            "mode",
            "radius",
            "algorithm",
            "leaf_size",
            "metric",
            "p",
            "metric_params",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "Nearest centroid classifier.",
        "full_name": "sklearn.neighbors.NearestCentroid",
        "href": "generated/sklearn.neighbors.NearestCentroid.html#sklearn.neighbors.NearestCentroid",
        "name": "NearestCentroid",
        "package_name": "module-sklearn.neighbors",
        "params": [
            "metric",
            "shrink_threshold"
        ],
        "type": "CLASS"
    },
    {
        "description": "Unsupervised learner for implementing neighbor searches.",
        "full_name": "sklearn.neighbors.NearestNeighbors",
        "href": "generated/sklearn.neighbors.NearestNeighbors.html#sklearn.neighbors.NearestNeighbors",
        "name": "NearestNeighbors",
        "package_name": "module-sklearn.neighbors",
        "params": [
            "n_neighbors",
            "radius",
            "algorithm",
            "leaf_size",
            "metric",
            "p",
            "metric_params",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "Neighborhood Components Analysis.",
        "full_name": "sklearn.neighbors.NeighborhoodComponentsAnalysis",
        "href": "generated/sklearn.neighbors.NeighborhoodComponentsAnalysis.html#sklearn.neighbors.NeighborhoodComponentsAnalysis",
        "name": "NeighborhoodComponentsAnalysis",
        "package_name": "module-sklearn.neighbors",
        "params": [
            "n_components",
            "init",
            "warm_start",
            "max_iter",
            "tol",
            "callback",
            "verbose",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Computes the (weighted) graph of k-Neighbors for points in X",
        "full_name": "sklearn.neighbors.kneighbors_graph",
        "href": "generated/sklearn.neighbors.kneighbors_graph.html#sklearn.neighbors.kneighbors_graph",
        "name": "kneighbors_graph",
        "package_name": "module-sklearn.neighbors",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Computes the (weighted) graph of Neighbors for points in X",
        "full_name": "sklearn.neighbors.radius_neighbors_graph",
        "href": "generated/sklearn.neighbors.radius_neighbors_graph.html#sklearn.neighbors.radius_neighbors_graph",
        "name": "radius_neighbors_graph",
        "package_name": "module-sklearn.neighbors",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Bernoulli Restricted Boltzmann Machine (RBM).",
        "full_name": "sklearn.neural_network.BernoulliRBM",
        "href": "generated/sklearn.neural_network.BernoulliRBM.html#sklearn.neural_network.BernoulliRBM",
        "name": "BernoulliRBM",
        "package_name": "module-sklearn.neural_network",
        "params": [
            "n_components",
            "learning_rate",
            "batch_size",
            "n_iter",
            "verbose",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Multi-layer Perceptron classifier.",
        "full_name": "sklearn.neural_network.MLPClassifier",
        "href": "generated/sklearn.neural_network.MLPClassifier.html#sklearn.neural_network.MLPClassifier",
        "name": "MLPClassifier",
        "package_name": "module-sklearn.neural_network",
        "params": [
            "hidden_layer_sizes",
            "activation",
            "solver",
            "alpha",
            "batch_size",
            "learning_rate",
            "learning_rate_init",
            "power_t",
            "max_iter",
            "shuffle",
            "random_state",
            "tol",
            "verbose",
            "warm_start",
            "momentum",
            "nesterovs_momentum",
            "early_stopping",
            "validation_fraction",
            "beta_1",
            "beta_2",
            "epsilon",
            "n_iter_no_change",
            "max_fun"
        ],
        "type": "CLASS"
    },
    {
        "description": "Multi-layer Perceptron regressor.",
        "full_name": "sklearn.neural_network.MLPRegressor",
        "href": "generated/sklearn.neural_network.MLPRegressor.html#sklearn.neural_network.MLPRegressor",
        "name": "MLPRegressor",
        "package_name": "module-sklearn.neural_network",
        "params": [
            "hidden_layer_sizes",
            "activation",
            "solver",
            "alpha",
            "batch_size",
            "learning_rate",
            "learning_rate_init",
            "power_t",
            "max_iter",
            "shuffle",
            "random_state",
            "tol",
            "verbose",
            "warm_start",
            "momentum",
            "nesterovs_momentum",
            "early_stopping",
            "validation_fraction",
            "beta_1",
            "beta_2",
            "epsilon",
            "n_iter_no_change",
            "max_fun"
        ],
        "type": "CLASS"
    },
    {
        "description": "Concatenates results of multiple transformer objects.",
        "full_name": "sklearn.pipeline.FeatureUnion",
        "href": "generated/sklearn.pipeline.FeatureUnion.html#sklearn.pipeline.FeatureUnion",
        "name": "FeatureUnion",
        "package_name": "module-sklearn.pipeline",
        "params": [
            "transformer_list",
            "n_jobs",
            "transformer_weights",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "Pipeline of transforms with a final estimator.",
        "full_name": "sklearn.pipeline.Pipeline",
        "href": "generated/sklearn.pipeline.Pipeline.html#sklearn.pipeline.Pipeline",
        "name": "Pipeline",
        "package_name": "module-sklearn.pipeline",
        "params": [
            "steps",
            "memory",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "Construct a Pipeline from the given estimators.",
        "full_name": "sklearn.pipeline.make_pipeline",
        "href": "generated/sklearn.pipeline.make_pipeline.html#sklearn.pipeline.make_pipeline",
        "name": "make_pipeline",
        "package_name": "module-sklearn.pipeline",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Construct a FeatureUnion from the given transformers.",
        "full_name": "sklearn.pipeline.make_union",
        "href": "generated/sklearn.pipeline.make_union.html#sklearn.pipeline.make_union",
        "name": "make_union",
        "package_name": "module-sklearn.pipeline",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Binarize data (set feature values to 0 or 1) according to a threshold.",
        "full_name": "sklearn.preprocessing.Binarizer",
        "href": "generated/sklearn.preprocessing.Binarizer.html#sklearn.preprocessing.Binarizer",
        "name": "Binarizer",
        "package_name": "module-sklearn.preprocessing",
        "params": [
            "threshold",
            "copy"
        ],
        "type": "CLASS"
    },
    {
        "description": "Constructs a transformer from an arbitrary callable.",
        "full_name": "sklearn.preprocessing.FunctionTransformer",
        "href": "generated/sklearn.preprocessing.FunctionTransformer.html#sklearn.preprocessing.FunctionTransformer",
        "name": "FunctionTransformer",
        "package_name": "module-sklearn.preprocessing",
        "params": [
            "func",
            "inverse_func",
            "validate",
            "accept_sparse",
            "check_inverse",
            "kw_args",
            "inv_kw_args"
        ],
        "type": "CLASS"
    },
    {
        "description": "Bin continuous data into intervals.",
        "full_name": "sklearn.preprocessing.KBinsDiscretizer",
        "href": "generated/sklearn.preprocessing.KBinsDiscretizer.html#sklearn.preprocessing.KBinsDiscretizer",
        "name": "KBinsDiscretizer",
        "package_name": "module-sklearn.preprocessing",
        "params": [
            "n_bins",
            "encode",
            "strategy",
            "dtype"
        ],
        "type": "CLASS"
    },
    {
        "description": "Center an arbitrary kernel matrix \\(K\\).",
        "full_name": "sklearn.preprocessing.KernelCenterer",
        "href": "generated/sklearn.preprocessing.KernelCenterer.html#sklearn.preprocessing.KernelCenterer",
        "name": "KernelCenterer",
        "package_name": "module-sklearn.preprocessing",
        "params": [],
        "type": "CLASS"
    },
    {
        "description": "Binarize labels in a one-vs-all fashion.",
        "full_name": "sklearn.preprocessing.LabelBinarizer",
        "href": "generated/sklearn.preprocessing.LabelBinarizer.html#sklearn.preprocessing.LabelBinarizer",
        "name": "LabelBinarizer",
        "package_name": "module-sklearn.preprocessing",
        "params": [
            "neg_label",
            "pos_label",
            "sparse_output"
        ],
        "type": "CLASS"
    },
    {
        "description": "Encode target labels with value between 0 and n_classes-1.",
        "full_name": "sklearn.preprocessing.LabelEncoder",
        "href": "generated/sklearn.preprocessing.LabelEncoder.html#sklearn.preprocessing.LabelEncoder",
        "name": "LabelEncoder",
        "package_name": "module-sklearn.preprocessing",
        "params": [],
        "type": "CLASS"
    },
    {
        "description": "Transform between iterable of iterables and a multilabel format.",
        "full_name": "sklearn.preprocessing.MultiLabelBinarizer",
        "href": "generated/sklearn.preprocessing.MultiLabelBinarizer.html#sklearn.preprocessing.MultiLabelBinarizer",
        "name": "MultiLabelBinarizer",
        "package_name": "module-sklearn.preprocessing",
        "params": [
            "classes",
            "sparse_output"
        ],
        "type": "CLASS"
    },
    {
        "description": "Scale each feature by its maximum absolute value.",
        "full_name": "sklearn.preprocessing.MaxAbsScaler",
        "href": "generated/sklearn.preprocessing.MaxAbsScaler.html#sklearn.preprocessing.MaxAbsScaler",
        "name": "MaxAbsScaler",
        "package_name": "module-sklearn.preprocessing",
        "params": [
            "copy"
        ],
        "type": "CLASS"
    },
    {
        "description": "Transform features by scaling each feature to a given range.",
        "full_name": "sklearn.preprocessing.MinMaxScaler",
        "href": "generated/sklearn.preprocessing.MinMaxScaler.html#sklearn.preprocessing.MinMaxScaler",
        "name": "MinMaxScaler",
        "package_name": "module-sklearn.preprocessing",
        "params": [
            "feature_range",
            "copy",
            "clip"
        ],
        "type": "CLASS"
    },
    {
        "description": "Normalize samples individually to unit norm.",
        "full_name": "sklearn.preprocessing.Normalizer",
        "href": "generated/sklearn.preprocessing.Normalizer.html#sklearn.preprocessing.Normalizer",
        "name": "Normalizer",
        "package_name": "module-sklearn.preprocessing",
        "params": [
            "norm",
            "copy"
        ],
        "type": "CLASS"
    },
    {
        "description": "Encode categorical features as a one-hot numeric array.",
        "full_name": "sklearn.preprocessing.OneHotEncoder",
        "href": "generated/sklearn.preprocessing.OneHotEncoder.html#sklearn.preprocessing.OneHotEncoder",
        "name": "OneHotEncoder",
        "package_name": "module-sklearn.preprocessing",
        "params": [
            "categories",
            "drop",
            "sparse",
            "dtype",
            "handle_unknown"
        ],
        "type": "CLASS"
    },
    {
        "description": "Encode categorical features as an integer array.",
        "full_name": "sklearn.preprocessing.OrdinalEncoder",
        "href": "generated/sklearn.preprocessing.OrdinalEncoder.html#sklearn.preprocessing.OrdinalEncoder",
        "name": "OrdinalEncoder",
        "package_name": "module-sklearn.preprocessing",
        "params": [
            "categories",
            "dtype",
            "handle_unknown",
            "unknown_value"
        ],
        "type": "CLASS"
    },
    {
        "description": "Generate polynomial and interaction features.",
        "full_name": "sklearn.preprocessing.PolynomialFeatures",
        "href": "generated/sklearn.preprocessing.PolynomialFeatures.html#sklearn.preprocessing.PolynomialFeatures",
        "name": "PolynomialFeatures",
        "package_name": "module-sklearn.preprocessing",
        "params": [
            "degree",
            "interaction_only",
            "include_bias",
            "order"
        ],
        "type": "CLASS"
    },
    {
        "description": "Apply a power transform featurewise to make data more Gaussian-like.",
        "full_name": "sklearn.preprocessing.PowerTransformer",
        "href": "generated/sklearn.preprocessing.PowerTransformer.html#sklearn.preprocessing.PowerTransformer",
        "name": "PowerTransformer",
        "package_name": "module-sklearn.preprocessing",
        "params": [
            "method",
            "standardize",
            "copy"
        ],
        "type": "CLASS"
    },
    {
        "description": "Transform features using quantiles information.",
        "full_name": "sklearn.preprocessing.QuantileTransformer",
        "href": "generated/sklearn.preprocessing.QuantileTransformer.html#sklearn.preprocessing.QuantileTransformer",
        "name": "QuantileTransformer",
        "package_name": "module-sklearn.preprocessing",
        "params": [
            "n_quantiles",
            "output_distribution",
            "ignore_implicit_zeros",
            "subsample",
            "random_state",
            "copy"
        ],
        "type": "CLASS"
    },
    {
        "description": "Scale features using statistics that are robust to outliers.",
        "full_name": "sklearn.preprocessing.RobustScaler",
        "href": "generated/sklearn.preprocessing.RobustScaler.html#sklearn.preprocessing.RobustScaler",
        "name": "RobustScaler",
        "package_name": "module-sklearn.preprocessing",
        "params": [
            "with_centering",
            "with_scaling",
            "quantile_range",
            "copy",
            "unit_variance"
        ],
        "type": "CLASS"
    },
    {
        "description": "Generate univariate B-spline bases for features.",
        "full_name": "sklearn.preprocessing.SplineTransformer",
        "href": "generated/sklearn.preprocessing.SplineTransformer.html#sklearn.preprocessing.SplineTransformer",
        "name": "SplineTransformer",
        "package_name": "module-sklearn.preprocessing",
        "params": [
            "n_knots",
            "degree",
            "knots",
            "extrapolation",
            "include_bias",
            "order"
        ],
        "type": "CLASS"
    },
    {
        "description": "Standardize features by removing the mean and scaling to unit variance.",
        "full_name": "sklearn.preprocessing.StandardScaler",
        "href": "generated/sklearn.preprocessing.StandardScaler.html#sklearn.preprocessing.StandardScaler",
        "name": "StandardScaler",
        "package_name": "module-sklearn.preprocessing",
        "params": [
            "copy",
            "with_mean",
            "with_std"
        ],
        "type": "CLASS"
    },
    {
        "description": "Augment dataset with an additional dummy feature.",
        "full_name": "sklearn.preprocessing.add_dummy_feature",
        "href": "generated/sklearn.preprocessing.add_dummy_feature.html#sklearn.preprocessing.add_dummy_feature",
        "name": "add_dummy_feature",
        "package_name": "module-sklearn.preprocessing",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Boolean thresholding of array-like or scipy.sparse matrix.",
        "full_name": "sklearn.preprocessing.binarize",
        "href": "generated/sklearn.preprocessing.binarize.html#sklearn.preprocessing.binarize",
        "name": "binarize",
        "package_name": "module-sklearn.preprocessing",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Binarize labels in a one-vs-all fashion.",
        "full_name": "sklearn.preprocessing.label_binarize",
        "href": "generated/sklearn.preprocessing.label_binarize.html#sklearn.preprocessing.label_binarize",
        "name": "label_binarize",
        "package_name": "module-sklearn.preprocessing",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Scale each feature to the [-1, 1] range without breaking the sparsity.",
        "full_name": "sklearn.preprocessing.maxabs_scale",
        "href": "generated/sklearn.preprocessing.maxabs_scale.html#sklearn.preprocessing.maxabs_scale",
        "name": "maxabs_scale",
        "package_name": "module-sklearn.preprocessing",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Transform features by scaling each feature to a given range.",
        "full_name": "sklearn.preprocessing.minmax_scale",
        "href": "generated/sklearn.preprocessing.minmax_scale.html#sklearn.preprocessing.minmax_scale",
        "name": "minmax_scale",
        "package_name": "module-sklearn.preprocessing",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Scale input vectors individually to unit norm (vector length).",
        "full_name": "sklearn.preprocessing.normalize",
        "href": "generated/sklearn.preprocessing.normalize.html#sklearn.preprocessing.normalize",
        "name": "normalize",
        "package_name": "module-sklearn.preprocessing",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Transform features using quantiles information.",
        "full_name": "sklearn.preprocessing.quantile_transform",
        "href": "generated/sklearn.preprocessing.quantile_transform.html#sklearn.preprocessing.quantile_transform",
        "name": "quantile_transform",
        "package_name": "module-sklearn.preprocessing",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Standardize a dataset along any axis.",
        "full_name": "sklearn.preprocessing.robust_scale",
        "href": "generated/sklearn.preprocessing.robust_scale.html#sklearn.preprocessing.robust_scale",
        "name": "robust_scale",
        "package_name": "module-sklearn.preprocessing",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Standardize a dataset along any axis.",
        "full_name": "sklearn.preprocessing.scale",
        "href": "generated/sklearn.preprocessing.scale.html#sklearn.preprocessing.scale",
        "name": "scale",
        "package_name": "module-sklearn.preprocessing",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Power transforms are a family of parametric, monotonic transformations that are applied to make data more Gaussian-like.",
        "full_name": "sklearn.preprocessing.power_transform",
        "href": "generated/sklearn.preprocessing.power_transform.html#sklearn.preprocessing.power_transform",
        "name": "power_transform",
        "package_name": "module-sklearn.preprocessing",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Reduce dimensionality through Gaussian random projection.",
        "full_name": "sklearn.random_projection.GaussianRandomProjection",
        "href": "generated/sklearn.random_projection.GaussianRandomProjection.html#sklearn.random_projection.GaussianRandomProjection",
        "name": "GaussianRandomProjection",
        "package_name": "module-sklearn.random_projection",
        "params": [
            "n_components",
            "eps",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Reduce dimensionality through sparse random projection.",
        "full_name": "sklearn.random_projection.SparseRandomProjection",
        "href": "generated/sklearn.random_projection.SparseRandomProjection.html#sklearn.random_projection.SparseRandomProjection",
        "name": "SparseRandomProjection",
        "package_name": "module-sklearn.random_projection",
        "params": [
            "n_components",
            "density",
            "eps",
            "dense_output",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Find a \u2018safe\u2019 number of components to randomly project to.",
        "full_name": "sklearn.random_projection.johnson_lindenstrauss_min_dim",
        "href": "generated/sklearn.random_projection.johnson_lindenstrauss_min_dim.html#sklearn.random_projection.johnson_lindenstrauss_min_dim",
        "name": "johnson_lindenstrauss_min_dim",
        "package_name": "module-sklearn.random_projection",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Label Propagation classifier.",
        "full_name": "sklearn.semi_supervised.LabelPropagation",
        "href": "generated/sklearn.semi_supervised.LabelPropagation.html#sklearn.semi_supervised.LabelPropagation",
        "name": "LabelPropagation",
        "package_name": "module-sklearn.semi_supervised",
        "params": [
            "kernel",
            "gamma",
            "n_neighbors",
            "max_iter",
            "tol",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "LabelSpreading model for semi-supervised learning.",
        "full_name": "sklearn.semi_supervised.LabelSpreading",
        "href": "generated/sklearn.semi_supervised.LabelSpreading.html#sklearn.semi_supervised.LabelSpreading",
        "name": "LabelSpreading",
        "package_name": "module-sklearn.semi_supervised",
        "params": [
            "kernel",
            "gamma",
            "n_neighbors",
            "alpha",
            "max_iter",
            "tol",
            "n_jobs"
        ],
        "type": "CLASS"
    },
    {
        "description": "Self-training classifier.",
        "full_name": "sklearn.semi_supervised.SelfTrainingClassifier",
        "href": "generated/sklearn.semi_supervised.SelfTrainingClassifier.html#sklearn.semi_supervised.SelfTrainingClassifier",
        "name": "SelfTrainingClassifier",
        "package_name": "module-sklearn.semi_supervised",
        "params": [
            "base_estimator",
            "threshold",
            "criterion",
            "k_best",
            "max_iter",
            "verbose"
        ],
        "type": "CLASS"
    },
    {
        "description": "Linear Support Vector Classification.",
        "full_name": "sklearn.svm.LinearSVC",
        "href": "generated/sklearn.svm.LinearSVC.html#sklearn.svm.LinearSVC",
        "name": "LinearSVC",
        "package_name": "module-sklearn.svm",
        "params": [
            "penalty",
            "loss",
            "dual",
            "tol",
            "C",
            "multi_class",
            "fit_intercept",
            "intercept_scaling",
            "class_weight",
            "verbose",
            "random_state",
            "max_iter"
        ],
        "type": "CLASS"
    },
    {
        "description": "Linear Support Vector Regression.",
        "full_name": "sklearn.svm.LinearSVR",
        "href": "generated/sklearn.svm.LinearSVR.html#sklearn.svm.LinearSVR",
        "name": "LinearSVR",
        "package_name": "module-sklearn.svm",
        "params": [
            "epsilon",
            "tol",
            "C",
            "loss",
            "fit_intercept",
            "intercept_scaling",
            "dual",
            "verbose",
            "random_state",
            "max_iter"
        ],
        "type": "CLASS"
    },
    {
        "description": "Nu-Support Vector Classification.",
        "full_name": "sklearn.svm.NuSVC",
        "href": "generated/sklearn.svm.NuSVC.html#sklearn.svm.NuSVC",
        "name": "NuSVC",
        "package_name": "module-sklearn.svm",
        "params": [
            "nu",
            "kernel",
            "degree",
            "gamma",
            "coef0",
            "shrinking",
            "probability",
            "tol",
            "cache_size",
            "class_weight",
            "verbose",
            "max_iter",
            "decision_function_shape",
            "break_ties",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Nu Support Vector Regression.",
        "full_name": "sklearn.svm.NuSVR",
        "href": "generated/sklearn.svm.NuSVR.html#sklearn.svm.NuSVR",
        "name": "NuSVR",
        "package_name": "module-sklearn.svm",
        "params": [
            "nu",
            "C",
            "kernel",
            "degree",
            "gamma",
            "coef0",
            "shrinking",
            "tol",
            "cache_size",
            "verbose",
            "max_iter"
        ],
        "type": "CLASS"
    },
    {
        "description": "Unsupervised Outlier Detection.",
        "full_name": "sklearn.svm.OneClassSVM",
        "href": "generated/sklearn.svm.OneClassSVM.html#sklearn.svm.OneClassSVM",
        "name": "OneClassSVM",
        "package_name": "module-sklearn.svm",
        "params": [
            "kernel",
            "degree",
            "gamma",
            "coef0",
            "tol",
            "nu",
            "shrinking",
            "cache_size",
            "verbose",
            "max_iter"
        ],
        "type": "CLASS"
    },
    {
        "description": "C-Support Vector Classification.",
        "full_name": "sklearn.svm.SVC",
        "href": "generated/sklearn.svm.SVC.html#sklearn.svm.SVC",
        "name": "SVC",
        "package_name": "module-sklearn.svm",
        "params": [
            "C",
            "kernel",
            "degree",
            "gamma",
            "coef0",
            "shrinking",
            "probability",
            "tol",
            "cache_size",
            "class_weight",
            "verbose",
            "max_iter",
            "decision_function_shape",
            "break_ties",
            "random_state"
        ],
        "type": "CLASS"
    },
    {
        "description": "Epsilon-Support Vector Regression.",
        "full_name": "sklearn.svm.SVR",
        "href": "generated/sklearn.svm.SVR.html#sklearn.svm.SVR",
        "name": "SVR",
        "package_name": "module-sklearn.svm",
        "params": [
            "kernel",
            "degree",
            "gamma",
            "coef0",
            "tol",
            "C",
            "epsilon",
            "shrinking",
            "cache_size",
            "verbose",
            "max_iter"
        ],
        "type": "CLASS"
    },
    {
        "description": "Return the lowest bound for C such that for C in (l1_min_C, infinity) the model is guaranteed not to be empty.",
        "full_name": "sklearn.svm.l1_min_c",
        "href": "generated/sklearn.svm.l1_min_c.html#sklearn.svm.l1_min_c",
        "name": "l1_min_c",
        "package_name": "module-sklearn.svm",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "A decision tree classifier.",
        "full_name": "sklearn.tree.DecisionTreeClassifier",
        "href": "generated/sklearn.tree.DecisionTreeClassifier.html#sklearn.tree.DecisionTreeClassifier",
        "name": "DecisionTreeClassifier",
        "package_name": "module-sklearn.tree",
        "params": [
            "criterion",
            "splitter",
            "max_depth",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_features",
            "random_state",
            "max_leaf_nodes",
            "min_impurity_decrease",
            "class_weight",
            "ccp_alpha"
        ],
        "type": "CLASS"
    },
    {
        "description": "A decision tree regressor.",
        "full_name": "sklearn.tree.DecisionTreeRegressor",
        "href": "generated/sklearn.tree.DecisionTreeRegressor.html#sklearn.tree.DecisionTreeRegressor",
        "name": "DecisionTreeRegressor",
        "package_name": "module-sklearn.tree",
        "params": [
            "criterion",
            "splitter",
            "max_depth",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_features",
            "random_state",
            "max_leaf_nodes",
            "min_impurity_decrease",
            "ccp_alpha"
        ],
        "type": "CLASS"
    },
    {
        "description": "An extremely randomized tree classifier.",
        "full_name": "sklearn.tree.ExtraTreeClassifier",
        "href": "generated/sklearn.tree.ExtraTreeClassifier.html#sklearn.tree.ExtraTreeClassifier",
        "name": "ExtraTreeClassifier",
        "package_name": "module-sklearn.tree",
        "params": [
            "criterion",
            "splitter",
            "max_depth",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_features",
            "random_state",
            "max_leaf_nodes",
            "min_impurity_decrease",
            "class_weight",
            "ccp_alpha"
        ],
        "type": "CLASS"
    },
    {
        "description": "An extremely randomized tree regressor.",
        "full_name": "sklearn.tree.ExtraTreeRegressor",
        "href": "generated/sklearn.tree.ExtraTreeRegressor.html#sklearn.tree.ExtraTreeRegressor",
        "name": "ExtraTreeRegressor",
        "package_name": "module-sklearn.tree",
        "params": [
            "criterion",
            "splitter",
            "max_depth",
            "min_samples_split",
            "min_samples_leaf",
            "min_weight_fraction_leaf",
            "max_features",
            "random_state",
            "min_impurity_decrease",
            "max_leaf_nodes",
            "ccp_alpha"
        ],
        "type": "CLASS"
    },
    {
        "description": "Export a decision tree in DOT format.",
        "full_name": "sklearn.tree.export_graphviz",
        "href": "generated/sklearn.tree.export_graphviz.html#sklearn.tree.export_graphviz",
        "name": "export_graphviz",
        "package_name": "module-sklearn.tree",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Build a text report showing the rules of a decision tree.",
        "full_name": "sklearn.tree.export_text",
        "href": "generated/sklearn.tree.export_text.html#sklearn.tree.export_text",
        "name": "export_text",
        "package_name": "module-sklearn.tree",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Plot a decision tree.",
        "full_name": "sklearn.tree.plot_tree",
        "href": "generated/sklearn.tree.plot_tree.html#sklearn.tree.plot_tree",
        "name": "plot_tree",
        "package_name": "module-sklearn.tree",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Find the minimum value of an array over positive values",
        "full_name": "sklearn.utils.arrayfuncs.min_pos",
        "href": "generated/sklearn.utils.arrayfuncs.min_pos.html#sklearn.utils.arrayfuncs.min_pos",
        "name": "min_pos",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Converts an array-like to an array of floats.",
        "full_name": "sklearn.utils.as_float_array",
        "href": "generated/sklearn.utils.as_float_array.html#sklearn.utils.as_float_array",
        "name": "as_float_array",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Throw a ValueError if X contains NaN or infinity.",
        "full_name": "sklearn.utils.assert_all_finite",
        "href": "generated/sklearn.utils.assert_all_finite.html#sklearn.utils.assert_all_finite",
        "name": "assert_all_finite",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Container object exposing keys as attributes.",
        "full_name": "sklearn.utils.Bunch",
        "href": "generated/sklearn.utils.Bunch.html#sklearn.utils.Bunch",
        "name": "Bunch",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "CLASS"
    },
    {
        "description": "Input validation for standard estimators.",
        "full_name": "sklearn.utils.check_X_y",
        "href": "generated/sklearn.utils.check_X_y.html#sklearn.utils.check_X_y",
        "name": "check_X_y",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Input validation on an array, list, sparse matrix or similar.",
        "full_name": "sklearn.utils.check_array",
        "href": "generated/sklearn.utils.check_array.html#sklearn.utils.check_array",
        "name": "check_array",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Validate scalar parameters type and value.",
        "full_name": "sklearn.utils.check_scalar",
        "href": "generated/sklearn.utils.check_scalar.html#sklearn.utils.check_scalar",
        "name": "check_scalar",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Check that all arrays have consistent first dimensions.",
        "full_name": "sklearn.utils.check_consistent_length",
        "href": "generated/sklearn.utils.check_consistent_length.html#sklearn.utils.check_consistent_length",
        "name": "check_consistent_length",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Turn seed into a np.random.RandomState instance",
        "full_name": "sklearn.utils.check_random_state",
        "href": "generated/sklearn.utils.check_random_state.html#sklearn.utils.check_random_state",
        "name": "check_random_state",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Estimate class weights for unbalanced datasets.",
        "full_name": "sklearn.utils.class_weight.compute_class_weight",
        "href": "generated/sklearn.utils.class_weight.compute_class_weight.html#sklearn.utils.class_weight.compute_class_weight",
        "name": "compute_class_weight",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Estimate sample weights by class for unbalanced datasets.",
        "full_name": "sklearn.utils.class_weight.compute_sample_weight",
        "href": "generated/sklearn.utils.class_weight.compute_sample_weight.html#sklearn.utils.class_weight.compute_sample_weight",
        "name": "compute_sample_weight",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Decorator to mark a function or class as deprecated.",
        "full_name": "sklearn.utils.deprecated",
        "href": "generated/sklearn.utils.deprecated.html#sklearn.utils.deprecated",
        "name": "deprecated",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "DECORATOR"
    },
    {
        "description": "Check if estimator adheres to scikit-learn conventions.",
        "full_name": "sklearn.utils.estimator_checks.check_estimator",
        "href": "generated/sklearn.utils.estimator_checks.check_estimator.html#sklearn.utils.estimator_checks.check_estimator",
        "name": "check_estimator",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Pytest specific decorator for parametrizing estimator checks.",
        "full_name": "sklearn.utils.estimator_checks.parametrize_with_checks",
        "href": "generated/sklearn.utils.estimator_checks.parametrize_with_checks.html#sklearn.utils.estimator_checks.parametrize_with_checks",
        "name": "parametrize_with_checks",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Build a HTML representation of an estimator.",
        "full_name": "sklearn.utils.estimator_html_repr",
        "href": "generated/sklearn.utils.estimator_html_repr.html#sklearn.utils.estimator_html_repr",
        "name": "estimator_html_repr",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Dot product that handle the sparse matrix case correctly.",
        "full_name": "sklearn.utils.extmath.safe_sparse_dot",
        "href": "generated/sklearn.utils.extmath.safe_sparse_dot.html#sklearn.utils.extmath.safe_sparse_dot",
        "name": "safe_sparse_dot",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Computes an orthonormal matrix whose range approximates the range of A.",
        "full_name": "sklearn.utils.extmath.randomized_range_finder",
        "href": "generated/sklearn.utils.extmath.randomized_range_finder.html#sklearn.utils.extmath.randomized_range_finder",
        "name": "randomized_range_finder",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Computes a truncated randomized SVD.",
        "full_name": "sklearn.utils.extmath.randomized_svd",
        "href": "generated/sklearn.utils.extmath.randomized_svd.html#sklearn.utils.extmath.randomized_svd",
        "name": "randomized_svd",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute log(det(A)) for A symmetric.",
        "full_name": "sklearn.utils.extmath.fast_logdet",
        "href": "generated/sklearn.utils.extmath.fast_logdet.html#sklearn.utils.extmath.fast_logdet",
        "name": "fast_logdet",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute density of a sparse vector.",
        "full_name": "sklearn.utils.extmath.density",
        "href": "generated/sklearn.utils.extmath.density.html#sklearn.utils.extmath.density",
        "name": "density",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Returns an array of the weighted modal (most common) value in a.",
        "full_name": "sklearn.utils.extmath.weighted_mode",
        "href": "generated/sklearn.utils.extmath.weighted_mode.html#sklearn.utils.extmath.weighted_mode",
        "name": "weighted_mode",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generator to create slices containing batch_size elements, from 0 to n.",
        "full_name": "sklearn.utils.gen_batches",
        "href": "generated/sklearn.utils.gen_batches.html#sklearn.utils.gen_batches",
        "name": "gen_batches",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Generator to create n_packs slices going up to n.",
        "full_name": "sklearn.utils.gen_even_slices",
        "href": "generated/sklearn.utils.gen_even_slices.html#sklearn.utils.gen_even_slices",
        "name": "gen_even_slices",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Return the shortest path length from source to all reachable nodes.",
        "full_name": "sklearn.utils.graph.single_source_shortest_path_length",
        "href": "generated/sklearn.utils.graph.single_source_shortest_path_length.html#sklearn.utils.graph.single_source_shortest_path_length",
        "name": "single_source_shortest_path_length",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Make arrays indexable for cross-validation.",
        "full_name": "sklearn.utils.indexable",
        "href": "generated/sklearn.utils.indexable.html#sklearn.utils.indexable",
        "name": "indexable",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Create a decorator for methods that are delegated to a sub-estimator",
        "full_name": "sklearn.utils.metaestimators.if_delegate_has_method",
        "href": "generated/sklearn.utils.metaestimators.if_delegate_has_method.html#sklearn.utils.metaestimators.if_delegate_has_method",
        "name": "if_delegate_has_method",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "An attribute that is available only if check returns a truthy value",
        "full_name": "sklearn.utils.metaestimators.available_if",
        "href": "generated/sklearn.utils.metaestimators.available_if.html#sklearn.utils.metaestimators.available_if",
        "name": "available_if",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Determine the type of data indicated by the target.",
        "full_name": "sklearn.utils.multiclass.type_of_target",
        "href": "generated/sklearn.utils.multiclass.type_of_target.html#sklearn.utils.multiclass.type_of_target",
        "name": "type_of_target",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Check if y is in a multilabel format.",
        "full_name": "sklearn.utils.multiclass.is_multilabel",
        "href": "generated/sklearn.utils.multiclass.is_multilabel.html#sklearn.utils.multiclass.is_multilabel",
        "name": "is_multilabel",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Extract an ordered array of unique labels.",
        "full_name": "sklearn.utils.multiclass.unique_labels",
        "href": "generated/sklearn.utils.multiclass.unique_labels.html#sklearn.utils.multiclass.unique_labels",
        "name": "unique_labels",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute the 32bit murmurhash3 of key at seed.",
        "full_name": "sklearn.utils.murmurhash3_32",
        "href": "generated/sklearn.utils.murmurhash3_32.html#sklearn.utils.murmurhash3_32",
        "name": "murmurhash3_32",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Resample arrays or sparse matrices in a consistent way.",
        "full_name": "sklearn.utils.resample",
        "href": "generated/sklearn.utils.resample.html#sklearn.utils.resample",
        "name": "resample",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Return rows, items or columns of X using indices.",
        "full_name": "sklearn.utils._safe_indexing",
        "href": "generated/sklearn.utils._safe_indexing.html#sklearn.utils._safe_indexing",
        "name": "_safe_indexing",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Return a mask which is safe to use on X.",
        "full_name": "sklearn.utils.safe_mask",
        "href": "generated/sklearn.utils.safe_mask.html#sklearn.utils.safe_mask",
        "name": "safe_mask",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Element wise squaring of array-likes and sparse matrices.",
        "full_name": "sklearn.utils.safe_sqr",
        "href": "generated/sklearn.utils.safe_sqr.html#sklearn.utils.safe_sqr",
        "name": "safe_sqr",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Shuffle arrays or sparse matrices in a consistent way.",
        "full_name": "sklearn.utils.shuffle",
        "href": "generated/sklearn.utils.shuffle.html#sklearn.utils.shuffle",
        "name": "shuffle",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute incremental mean and variance along an axis on a CSR or CSC matrix.",
        "full_name": "sklearn.utils.sparsefuncs.incr_mean_variance_axis",
        "href": "generated/sklearn.utils.sparsefuncs.incr_mean_variance_axis.html#sklearn.utils.sparsefuncs.incr_mean_variance_axis",
        "name": "incr_mean_variance_axis",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Inplace column scaling of a CSC/CSR matrix.",
        "full_name": "sklearn.utils.sparsefuncs.inplace_column_scale",
        "href": "generated/sklearn.utils.sparsefuncs.inplace_column_scale.html#sklearn.utils.sparsefuncs.inplace_column_scale",
        "name": "inplace_column_scale",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Inplace row scaling of a CSR or CSC matrix.",
        "full_name": "sklearn.utils.sparsefuncs.inplace_row_scale",
        "href": "generated/sklearn.utils.sparsefuncs.inplace_row_scale.html#sklearn.utils.sparsefuncs.inplace_row_scale",
        "name": "inplace_row_scale",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Swaps two rows of a CSC/CSR matrix in-place.",
        "full_name": "sklearn.utils.sparsefuncs.inplace_swap_row",
        "href": "generated/sklearn.utils.sparsefuncs.inplace_swap_row.html#sklearn.utils.sparsefuncs.inplace_swap_row",
        "name": "inplace_swap_row",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Swaps two columns of a CSC/CSR matrix in-place.",
        "full_name": "sklearn.utils.sparsefuncs.inplace_swap_column",
        "href": "generated/sklearn.utils.sparsefuncs.inplace_swap_column.html#sklearn.utils.sparsefuncs.inplace_swap_column",
        "name": "inplace_swap_column",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Compute mean and variance along an axis on a CSR or CSC matrix.",
        "full_name": "sklearn.utils.sparsefuncs.mean_variance_axis",
        "href": "generated/sklearn.utils.sparsefuncs.mean_variance_axis.html#sklearn.utils.sparsefuncs.mean_variance_axis",
        "name": "mean_variance_axis",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Inplace column scaling of a CSR matrix.",
        "full_name": "sklearn.utils.sparsefuncs.inplace_csr_column_scale",
        "href": "generated/sklearn.utils.sparsefuncs.inplace_csr_column_scale.html#sklearn.utils.sparsefuncs.inplace_csr_column_scale",
        "name": "inplace_csr_column_scale",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Inplace row normalize using the l1 norm",
        "full_name": "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1",
        "href": "generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1.html#sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l1",
        "name": "inplace_csr_row_normalize_l1",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Inplace row normalize using the l2 norm",
        "full_name": "sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2",
        "href": "generated/sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2.html#sklearn.utils.sparsefuncs_fast.inplace_csr_row_normalize_l2",
        "name": "inplace_csr_row_normalize_l2",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Sample integers without replacement.",
        "full_name": "sklearn.utils.random.sample_without_replacement",
        "href": "generated/sklearn.utils.random.sample_without_replacement.html#sklearn.utils.random.sample_without_replacement",
        "name": "sample_without_replacement",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Perform is_fitted validation for estimator.",
        "full_name": "sklearn.utils.validation.check_is_fitted",
        "href": "generated/sklearn.utils.validation.check_is_fitted.html#sklearn.utils.validation.check_is_fitted",
        "name": "check_is_fitted",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Check that memory is joblib.Memory-like.",
        "full_name": "sklearn.utils.validation.check_memory",
        "href": "generated/sklearn.utils.validation.check_memory.html#sklearn.utils.validation.check_memory",
        "name": "check_memory",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Make sure that array is 2D, square and symmetric.",
        "full_name": "sklearn.utils.validation.check_symmetric",
        "href": "generated/sklearn.utils.validation.check_symmetric.html#sklearn.utils.validation.check_symmetric",
        "name": "check_symmetric",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Ravel column or 1d numpy array, else raises an error.",
        "full_name": "sklearn.utils.validation.column_or_1d",
        "href": "generated/sklearn.utils.validation.column_or_1d.html#sklearn.utils.validation.column_or_1d",
        "name": "column_or_1d",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Checks whether the estimator\u2019s fit method supports the given parameter.",
        "full_name": "sklearn.utils.validation.has_fit_parameter",
        "href": "generated/sklearn.utils.validation.has_fit_parameter.html#sklearn.utils.validation.has_fit_parameter",
        "name": "has_fit_parameter",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Get a list of all estimators from sklearn.",
        "full_name": "sklearn.utils.all_estimators",
        "href": "generated/sklearn.utils.all_estimators.html#sklearn.utils.all_estimators",
        "name": "all_estimators",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Change the default backend used by Parallel inside a with block.",
        "full_name": "sklearn.utils.parallel_backend",
        "href": "generated/sklearn.utils.parallel_backend.html#sklearn.utils.parallel_backend",
        "name": "parallel_backend",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    },
    {
        "description": "Register a new Parallel backend factory.",
        "full_name": "sklearn.utils.register_parallel_backend",
        "href": "generated/sklearn.utils.register_parallel_backend.html#sklearn.utils.register_parallel_backend",
        "name": "register_parallel_backend",
        "package_name": "module-sklearn.utils",
        "params": [],
        "type": "METHOD"
    }
]